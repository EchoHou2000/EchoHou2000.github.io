const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":130,\"nextId\":130,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-2e3eac9e\",\"2\":\"v-1473bf53\",\"3\":\"v-1473bf53#目录\",\"4\":\"v-1473bf53@0\",\"5\":\"v-4e65ec78\",\"6\":\"v-4e65ec78@0\",\"7\":\"v-4e65ec78@1\",\"8\":\"v-c151bf32\",\"9\":\"v-c151bf32@0\",\"10\":\"v-c151bf32@1\",\"11\":\"v-438ffe52\",\"12\":\"v-438ffe52#markdown-介绍\",\"13\":\"v-438ffe52#markdown-配置\",\"14\":\"v-438ffe52#markdown-扩展\",\"15\":\"v-438ffe52#vuepress-扩展\",\"16\":\"v-438ffe52#主题扩展\",\"17\":\"v-438ffe52#自定义容器\",\"18\":\"v-438ffe52#代码块\",\"19\":\"v-438ffe52#上下角标\",\"20\":\"v-438ffe52#自定义对齐\",\"21\":\"v-438ffe52#attrs\",\"22\":\"v-438ffe52#脚注\",\"23\":\"v-438ffe52#标记\",\"24\":\"v-438ffe52#任务列表\",\"25\":\"v-438ffe52#图片增强\",\"26\":\"v-438ffe52#卡片\",\"27\":\"v-438ffe52#图表\",\"28\":\"v-438ffe52#echarts\",\"29\":\"v-438ffe52#流程图\",\"30\":\"v-438ffe52#mermaid\",\"31\":\"v-438ffe52#tex-语法\",\"32\":\"v-438ffe52#导入文件\",\"33\":\"v-438ffe52#代码演示\",\"34\":\"v-438ffe52#样式化\",\"35\":\"v-438ffe52#交互演示\",\"36\":\"v-438ffe52#vue-交互演示\",\"37\":\"v-438ffe52#幻灯片\",\"38\":\"v-438ffe52@0\",\"39\":\"v-438ffe52@1\",\"40\":\"v-6e19edb7\",\"41\":\"v-6e19edb7#页面信息\",\"42\":\"v-6e19edb7#页面内容\",\"43\":\"v-6e19edb7#页面结构\",\"44\":\"v-6e19edb7@0\",\"45\":\"v-6e19edb7@1\",\"46\":\"v-8ef6ef4c\",\"47\":\"v-8ef6ef4c#原子性\",\"48\":\"v-8ef6ef4c#一致性\",\"49\":\"v-8ef6ef4c#隔离性\",\"50\":\"v-8ef6ef4c#持久性\",\"51\":\"v-8ef6ef4c@0\",\"52\":\"v-8ef6ef4c@1\",\"53\":\"v-2bc6566a\",\"54\":\"v-2bc6566a#业务需求\",\"55\":\"v-2bc6566a#为什么不用http协议\",\"56\":\"v-2bc6566a#websocket好在哪里\",\"57\":\"v-2bc6566a@0\",\"58\":\"v-2bc6566a@1\",\"59\":\"v-24b7c48d\",\"60\":\"v-24b7c48d@0\",\"61\":\"v-24b7c48d@1\",\"62\":\"v-c5e5db88\",\"63\":\"v-c5e5db88@0\",\"64\":\"v-6d907f8c\",\"65\":\"v-6d907f8c#缓存击穿\",\"66\":\"v-6d907f8c#如何解决\",\"67\":\"v-6d907f8c#缓存穿透\",\"68\":\"v-6d907f8c#如何解决-1\",\"69\":\"v-6d907f8c@0\",\"70\":\"v-6d907f8c@1\",\"71\":\"v-41965b0b\",\"72\":\"v-41965b0b#应用层\",\"73\":\"v-41965b0b#以http协议举例\",\"74\":\"v-41965b0b#传输层\",\"75\":\"v-41965b0b#网络层\",\"76\":\"v-41965b0b#网络接口层\",\"77\":\"v-41965b0b@0\",\"78\":\"v-41965b0b@1\",\"79\":\"v-513e3da0\",\"80\":\"v-513e3da0#业务需求\",\"81\":\"v-513e3da0#思路\",\"82\":\"v-513e3da0#代码实现\",\"83\":\"v-513e3da0#一、声明注解\",\"84\":\"v-513e3da0#二、定义切面。\",\"85\":\"v-513e3da0#三、应用注解\",\"86\":\"v-513e3da0#spring-aop的实现原理\",\"87\":\"v-513e3da0@0\",\"88\":\"v-513e3da0@1\",\"89\":\"v-52f3163f\",\"90\":\"v-52f3163f#概念\",\"91\":\"v-52f3163f#api\",\"92\":\"v-52f3163f@0\",\"93\":\"v-52f3163f@1\",\"94\":\"v-9605b516\",\"95\":\"v-9605b516#hashmap的底层存储\",\"96\":\"v-9605b516#扩容机制\",\"97\":\"v-9605b516@0\",\"98\":\"v-9605b516@1\",\"99\":\"v-d329f092\",\"100\":\"v-d329f092@0\",\"101\":\"v-d329f092@1\",\"102\":\"v-37c48da6\",\"103\":\"v-37c48da6#题目\",\"104\":\"v-37c48da6#思路\",\"105\":\"v-37c48da6@0\",\"106\":\"v-37c48da6@1\",\"107\":\"v-345adc68\",\"108\":\"v-345adc68#题目\",\"109\":\"v-345adc68#思路\",\"110\":\"v-345adc68@0\",\"111\":\"v-345adc68@1\",\"112\":\"v-30f12b2a\",\"113\":\"v-30f12b2a#题目\",\"114\":\"v-30f12b2a#思路\",\"115\":\"v-30f12b2a#代码\",\"116\":\"v-30f12b2a@0\",\"117\":\"v-30f12b2a@1\",\"118\":\"v-2d8779ec\",\"119\":\"v-2d8779ec#题目\",\"120\":\"v-2d8779ec#思路\",\"121\":\"v-2d8779ec@0\",\"122\":\"v-2d8779ec@1\",\"123\":\"v-0d4e2de0\",\"124\":\"v-0d4e2de0#思路\",\"125\":\"v-0d4e2de0@0\",\"126\":\"v-0d4e2de0@1\",\"127\":\"v-e1e3da16\",\"128\":\"v-07412858\",\"129\":\"v-afd8dcb6\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,24],\"1\":[1],\"2\":[1],\"3\":[1,5],\"4\":[null,null,1],\"5\":[1,18],\"6\":[null,null,1],\"7\":[null,null,1],\"8\":[1,7],\"9\":[null,null,1],\"10\":[null,null,1],\"11\":[2,11],\"12\":[2,8],\"13\":[2,13],\"14\":[2,11],\"15\":[2,10],\"16\":[1,10],\"17\":[1,19],\"18\":[1,1],\"19\":[1,3],\"20\":[1,3],\"21\":[1,5],\"22\":[1,3],\"23\":[1,3],\"24\":[1,5],\"25\":[1,2],\"26\":[1,23],\"27\":[1,1],\"28\":[1,1],\"29\":[1,1],\"30\":[1,1],\"31\":[2,10],\"32\":[1,6],\"33\":[1,1],\"34\":[1,5],\"35\":[1,1],\"36\":[2,1],\"37\":[1,3],\"38\":[null,null,1],\"39\":[null,null,1],\"40\":[1,3],\"41\":[1,20],\"42\":[1,17],\"43\":[1,16],\"44\":[null,null,1],\"45\":[null,null,2],\"46\":[1,6],\"47\":[1,20],\"48\":[1,9],\"49\":[1,4],\"50\":[1,5],\"51\":[null,null,1],\"52\":[null,null,2],\"53\":[1],\"54\":[1,11],\"55\":[1,23],\"56\":[1,28],\"57\":[null,null,1],\"58\":[null,null,3],\"59\":[2,18],\"60\":[null,null,1],\"61\":[null,null,2],\"62\":[1,30],\"63\":[null,null,1],\"64\":[1,15],\"65\":[1,9],\"66\":[1,13],\"67\":[1,12],\"68\":[1,31],\"69\":[null,null,1],\"70\":[null,null,2],\"71\":[2,7],\"72\":[1,9],\"73\":[1,26],\"74\":[1,9],\"75\":[1,11],\"76\":[1,5],\"77\":[null,null,1],\"78\":[null,null,2],\"79\":[3],\"80\":[1,9],\"81\":[1,23],\"82\":[1,7],\"83\":[2,27],\"84\":[3,34],\"85\":[2,23],\"86\":[2,31],\"87\":[null,null,2],\"88\":[null,null,2],\"89\":[1,18],\"90\":[1,11],\"91\":[1,30],\"92\":[null,null,1],\"93\":[null,null,1],\"94\":[1],\"95\":[1,16],\"96\":[1,9],\"97\":[null,null,2],\"98\":[null,null,1],\"99\":[1,20],\"100\":[null,null,1],\"101\":[null,null,2],\"102\":[2],\"103\":[1,11],\"104\":[1,50],\"105\":[null,null,2],\"106\":[null,null,3],\"107\":[2],\"108\":[1,10],\"109\":[1,73],\"110\":[null,null,2],\"111\":[null,null,3],\"112\":[2],\"113\":[1,17],\"114\":[1,14],\"115\":[1,26],\"116\":[null,null,2],\"117\":[null,null,1],\"118\":[2],\"119\":[1,17],\"120\":[1,60],\"121\":[null,null,1],\"122\":[null,null,3],\"123\":[2,16],\"124\":[1,40],\"125\":[null,null,1],\"126\":[null,null,2],\"127\":[1],\"128\":[1],\"129\":[1]},\"averageFieldLength\":[1.2319655068860835,13.97222455819548,0.8957184516603142],\"storedFields\":{\"0\":{\"h\":\"About Me\",\"t\":[\"谈不上走了很多的路，吃了很多的苦，但是还是想要把我的故事记录下来，提醒自己，回头看看路，不要忘了16岁自己的梦想，继续向前走，虚心请教的同时，也不要忘了关注自己的内心。\",\"博学而笃志，切问而近思。\",\"最近在找日常实习的时候，有个面试官问了一个问题，我为什么选择了计算机，又为什么选择了Java后端？\",\"NASA 星球科学总监 Jim Green 表示，把自己姓名发送到火星上，也是参与火星以及未来太空探险旅行的一种方式。\",\"Forever Young\"]},\"1\":{\"h\":\"幻灯片页\"},\"2\":{\"h\":\"主要功能与配置演示\"},\"3\":{\"h\":\"目录\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"4\":{\"c\":[\"使用指南\"]},\"5\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"6\":{\"c\":[\"使用指南\"]},\"7\":{\"c\":[\"禁用\"]},\"8\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"9\":{\"c\":[\"使用指南\"]},\"10\":{\"c\":[\"文章加密\"]},\"11\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"12\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"13\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"14\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"15\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"16\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"17\":{\"h\":\"自定义容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"18\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"19\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"20\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"21\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"22\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"23\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"24\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"25\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"26\":{\"h\":\"卡片\",\"t\":[\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mister-hope.com/logo.svg link: https://mister-hope.com color: rgba(253, 230, 138, 0.15) \",\"查看详情\"]},\"27\":{\"h\":\"图表\",\"t\":[\"查看详情\"]},\"28\":{\"h\":\"Echarts\",\"t\":[\"查看详情\"]},\"29\":{\"h\":\"流程图\",\"t\":[\"查看详情\"]},\"30\":{\"h\":\"Mermaid\",\"t\":[\"查看详情\"]},\"31\":{\"h\":\"Tex 语法\",\"t\":[\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\",\"查看详情\"]},\"32\":{\"h\":\"导入文件\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\",\"查看详情\"]},\"33\":{\"h\":\"代码演示\",\"t\":[\"查看详情\"]},\"34\":{\"h\":\"样式化\",\"t\":[\"向 Mr.Hope 捐赠一杯咖啡。 \",\"查看详情\"]},\"35\":{\"h\":\"交互演示\",\"t\":[\"查看详情\"]},\"36\":{\"h\":\"Vue 交互演示\",\"t\":[\"查看详情\"]},\"37\":{\"h\":\"幻灯片\",\"t\":[\"查看详情\",\"这是脚注内容 ↩︎\"]},\"38\":{\"c\":[\"使用指南\"]},\"39\":{\"c\":[\"Markdown\"]},\"40\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"41\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"42\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"提示\",\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\",\"主题包含了一个自定义徽章可以使用:\",\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"]},\"43\":{\"h\":\"页面结构\",\"t\":[\"此页面应当包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"导航栏\",\"侧边栏\",\"页脚\",\"返回顶部按钮\",\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"]},\"44\":{\"c\":[\"使用指南\"]},\"45\":{\"c\":[\"页面配置\",\"使用指南\"]},\"46\":{\"h\":\"事务的ACID\",\"t\":[\"事务有四大特性。一致性是最终达成的目的，原子性、隔离性、持久性是手段。\"]},\"47\":{\"h\":\"原子性\",\"t\":[\"一个事务中的所有操作，要么全部发生，要么全部不发生，不会出现只执行一半，而另一半没有执行的情况。\",\"比如经典的转账案例，A向B转账100元，操作1是A的账户扣除100元，操作2应该是B的账户增加100元。但是如果操作1结束后的瞬间，数据库宕机，操作2没有发生，整个事务应该回滚，回到操作1之前的状态，就像任何操作没有进行的样子，而不能\\\"明明A账户扣除了100元，但是B账户没有增加\\\"的情况。\"]},\"48\":{\"h\":\"一致性\",\"t\":[\"一个事务执行前后，数据库应该保持一致性的状态，比如A账户和B账户原来余额都是200元，一共是400元，转账之后，A账户应该是100元，B账户应该是300元，加起来还是400元。\"]},\"49\":{\"h\":\"隔离性\",\"t\":[\"数据库的事务应该具有隔离性，即不同事务在不同的空间能够并发执行，而不会相互干扰。\"]},\"50\":{\"h\":\"持久性\",\"t\":[\"一个事务执行完毕后，对数据库的影响应该是永久的，即使数据库发生宕机，也不应该丢失数据。\"]},\"51\":{\"c\":[\"数据库\"]},\"52\":{\"c\":[\"面试题\",\"重要\"]},\"53\":{\"h\":\"为什么用WebSocket协议而不是HTTP\"},\"54\":{\"h\":\"业务需求\",\"t\":[\"业务背景是一个类似于B站的视频弹幕系统，现在需要实现一个用户发送弹幕和获取弹幕（推送弹幕）功能。\",\"场景是这样的，用户进入我们的系统，在视频列表点进自己感兴趣的视频，然后看到了视频上方的弹幕，自己也可以发送一条弹幕，这条弹幕也会推送到所有在线看到视频的用户。\"]},\"55\":{\"h\":\"为什么不用HTTP协议\",\"t\":[\"如果我们采用传统的HTTP协议，效果如何？\",\"HTTP协议是短连接，并且是单向的，也就是说，客户端需要不停地轮询服务端：\\\"你那有没有资源？\\\"，如果有，会进行一个拉取资源的操作，而服务端并不会主动向客户端推送资源。\",\"这就是短连接的过程，建立连接和释放连接的过程也是要消耗资源的。\",\"TCP三次握手建立连接 拉取资源 TCP四次挥手释放连接 ...... TCP三次握手建立连接 拉取资源 TCP四次挥手释放连接 \",\"但是，如果服务器此时就没有新增的资源，客户端还是要不断轮询，这又是对资源的浪费。\",\"所以，对于获取弹幕功能，我们没有采用HTTP协议。\"]},\"56\":{\"h\":\"WebSocket好在哪里\",\"t\":[\"那么WebSocket协议对比HTTP协议的优势在哪呢，最后我们为什么采用WebSocket协议？\",\"对于弹幕模块，有两个很大的优势。\",\"一是全双工通信，也就是不但客户端能向服务端请求资源，服务端也能向客户端推送资源。\",\"二是长连接，也就是不用频繁请求、断开连接消耗资源，并且弹幕模块本来就是一个长时间请求弹幕的过程，用长连接更适合，并且也是基于TCP协议的，能够保证消息的可靠性。\",\"除此之外，WebSocket协议没有HTTP协议的请求头header，也就是传输的报文体积更小，消息速度更快。\",\"但是并不是说WebSocket协议就一定优于HTTP协议，HTTP协议协议虽然多了个请求头header，但是易于拓展，并且如果是不需要长时间通信的功能或者接口，用HTTP的短连接更好，用WebSocket的长连接反而会长时间占用内存这些资源。所以用什么技术，架构如何设计，是需要根据具体业务场景来判断的。\"]},\"57\":{\"c\":[\"计算机网络\"]},\"58\":{\"c\":[\"WebSocket\",\"项目\",\"原创\"]},\"59\":{\"h\":\"double类型的值可以赋给long变量吗？\",\"t\":[\"在不进行强制转换的情况下，double类型的值可以赋给long变量吗？\",\"不可以。即使double类型的值是1，这个值也不能赋给long变量。\",\"比如下面这两种写法，都是错的，编译器会报错：\",\"double a = 0.1 long b = a; // 编译报错 long b = 0.1; // 编译报错 \",\"double a = 1; long b = a; // 编译报错 long b = 1; // 这个可以 \"]},\"60\":{\"c\":[\"Java基础\"]},\"61\":{\"c\":[\"面试\",\"基础语法\"]},\"62\":{\"h\":\"Git的rebase\",\"t\":[\"如果此时有两个分支，一个master分支，一个feature分支（需求开发分支），feature是从master的某个节点处分离出来的一条分支。\",\"如果我们在feature分支开发一段时间后，想拉取master分支的最新代码合并到feature上，可以用git pull --rebase。feature是待变基分支，master是基分支。\",\"比如说feature是master节点B处拉出来的一条新分支，在feature分支开发一段时间后（此时是A->B->C->D），要拉取master最新的代码合到feature上（比如master分支上在B节点后新开发了M）。这时候需要把feature上的提交暂存下来，然后删掉feature的提交记录，找到master的最新记录，再把暂存的feature提交接上去。\",\"所以显而易见，使用git pull --rebase，会使feature的原基底都变了，会丢掉一部分之前的提交记录，有时候不好追溯之前的提交。\"]},\"63\":{\"c\":[\"Git\"]},\"64\":{\"h\":\"缓存击穿和缓存穿透如何解决\",\"t\":[\"当数据量达到一定数量级后，对于用户经常访问的数据（热点数据）或者构建比较复杂的数据，只用MySQL进行查询是比较耗时的，所以我们用Redis进行缓存，因为是基于内存的数据库，所以查询很快。\",\"但是使用缓存又会产生一些问题，比如缓存雪崩、缓存击穿、缓存穿透。\",\"今天来重点讲一下缓存击穿和缓存穿透（滴滴面试题）。\"]},\"65\":{\"h\":\"缓存击穿\",\"t\":[\"当Web应用触发请求，到Redis读取数据，而此时热点数据缓存过期，缓存无法命中，就去数据库中请求数据，这一瞬间大量请求就会打到数据库，数据库压力过大，可能会有宕机的风险。\"]},\"66\":{\"h\":\"如何解决\",\"t\":[\"缓存击穿的原因就是热点数据缓存过期，那么其中一个解决方案就是：不给热点数据设置过期时间，由后台异步更新缓存，或者当热点数据快要过期的时候，提前通知后台线程更新缓存以及重新设置更新时间。\",\"还有一个点就是缓存无法命中的场景，可以设置互斥锁，保证同一时间只有一个用户线程更新缓存，未能获取互斥锁的请求，要么返回空值或者默认值，要么等待锁释放后重新读取缓存。\"]},\"67\":{\"h\":\"缓存穿透\",\"t\":[\"当Web应用触发请求，到Redis读取数据，而此时缓存中没有数据，缓存无法命中，就去数据库中请求数据，而数据库中也没有数据，就无法构建缓存。这时候大量请求又请求数据库，而数据库没有对应的资源，数据库承受巨大压力，有宕机的风险。\"]},\"68\":{\"h\":\"如何解决\",\"t\":[\"这种现象的原因就是：数据库中没有Web应用要请求的数据。\",\"一、可能是恶意请求，数据压根就不存在。我们可以在接口层面，对于一些非法的请求进行拦截判断，也就不会到达数据库了。\",\"二、缓存空值或默认值。当线上发现发生缓存穿透的问题，我们可以针对请求，在Redis里缓存一个空值或者默认值，会直接返回给前端，而不会请求数据库。\",\"三、布隆过滤器。在向数据库写入数据的时候，在布隆过滤器上做个标记，在Web应用请求查询的时候，先查布隆，如果不存在就直接返回，如果存在再向缓存中查询数据。但是可能有精度问题，因为布隆过滤器底层是由位图数组和哈希算法实现的，可能会存在哈希碰撞的问题，如果布隆判断不存在，就一定不存在，但是如果判断存在，实际上可能不存在。\"]},\"69\":{\"c\":[\"Redis\"]},\"70\":{\"c\":[\"面试高频\",\"缓存\"]},\"71\":{\"h\":\"TCP/IP四层模型\",\"t\":[\"TCP/IP四层模型是计算机网络实际应用的模型。 从上到下分别是应用层、传输层、网络层、网络接口层。\"]},\"72\":{\"h\":\"应用层\",\"t\":[\"应用层是用户直接接触到的最上层，比如手机上的软件都是在应用层实现的。\",\"应用层只需要专注为用户提供服务，比如HTTP超文本传输协议、SMTP简单邮件传输协议、FTP文件传输协议、DNS域名解析服务、Telnet远程登陆协议等。\"]},\"73\":{\"h\":\"以HTTP协议举例\",\"t\":[\"这些协议在应用层专注为用户提供协议，比如我们打开一个网页，就是HTTP的GET请求，通常会在浏览器的搜索框携带一些参数，HTTP本身是不会对url的长度进行限制，但是浏览器的本身会进行限制，并且GET请求的参数只允许有ASCII码。我们看到的网页，比如HTML就是一个常见的超文本，标签里包含了一些超链接、视频、图片，经浏览器解析后，我们看见的页面就是既包含文本，又包含视频等。\",\"除了GET请求，HTTP还有一个POST请求，GET请求代表获取某个资源，POST请求代表添加某个资源，浏览器对Body的大小没有限制，格式也只需要前后端协商好即可。比如为某篇文章添加评论，提交后文本会写到报文Body中，以Body的形式通过TCP协议存到服务器中。\",\"应用数据从应用层传到传输层。\"]},\"74\":{\"h\":\"传输层\",\"t\":[\"传输层为上层（也就是应用层）提供网络支持，该层有两个传输协议，用户数据报协议UDP、传输控制协议TCP。 传输数据从应用层传到传输层之后，会加上TCP的头部传输给网络层。\"]},\"75\":{\"h\":\"网络层\",\"t\":[\"因为网络之间的传输过程是错综复杂的，我们分层就是为了让每一层简单、高效。网络之间实际的传输功能是由网络层实现的，传输层只负责服务好应用，作为数据传输的媒介，帮助实现通信。 网络层提供了IP协议，当传输数据+TCP头部传到网络层时，会加上一个IP头部传送给下一层。\"]},\"76\":{\"h\":\"网络接口层\",\"t\":[\"提供了数据链路级别的功能，当传输数据+TCP头+IP头传输到网络接口层时，会在前后分别加上帧头和帧尾，封装成数据帧发送到网络上。\"]},\"77\":{\"c\":[\"计算机网络\"]},\"78\":{\"c\":[\"面试\",\"分布式文件系统岗位\"]},\"79\":{\"h\":\"我是怎么用Spring AOP的？\"},\"80\":{\"h\":\"业务需求\",\"t\":[\"项目中需要对前端的元素、接口进行权限控制，如果权限不足，无法访问。而后端又有很多接口需要进行权限判断，每个接口都进行判断，会有很多重复性的代码，可维护性不高。\"]},\"81\":{\"h\":\"思路\",\"t\":[\"所以我们需要把这些公共的代码抽出来，我们编写业务代码的时候，只需要关注具体不同的逻辑即可，不用写大量重复性的代码。而具体的业务逻辑相当于一个\\\"织入\\\"进去的操作。\",\"在这个过程中，我们抽出来不是关键业务的同一类方法，并且封装成一个类用来判断权限。\",\"我们可以使用Spring AOP的技术来实现，在AOP中，这个封装成的类，叫切面，可以用@Aspect实现。我们在调用每一个接口的时候，都需要先判断权限，所以给切面中具体的类加上@Before注解，代表在目标方法调用之前执行。\"]},\"82\":{\"h\":\"代码实现\",\"t\":[\"我们希望最后的实现效果，是在Controller层的接口直接加上一个注解，就能实现权限判断，这个注解是我们自定义的，而这个注解如何工作的具体逻辑，需要在切面里写。\"]},\"83\":{\"h\":\"一、声明注解\",\"t\":[\"我们想对角色权限进行控制，第一步就是先定义自己的注解，确定这个注解的位置后，切面才能工作。\",\"/** * @Retention 代表生命周期，这里是RUNTIME，表示运行期间一直存在 * @Target 表示这个注解要加在方法上 * @Document 表示这个注解会被加到Doc文档上 * @Component 表示会被Spring进行管理，后面进行依赖注入 */ @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) @Documented @Component public @interface ApiLimitedRole { String[] limitedRoleCodeList() default {}; } \"]},\"84\":{\"h\":\"二、定义切面。\",\"t\":[\"@Order(1) @Component @Aspect public class ApiLimitedRoleAspect { @Autowired private UserSupport userSupport; @Autowired private UserRoleService userRoleService; // @Pointcut 表示切点的应用范围 // 这里指发挥作用的注解具体是哪一个 @Pointcut(\\\"@annotation(com.houbingzhi.bilibili.domain.annotation.ApiLimitedRole)\\\") public void check(){ } // 在调用Controller层时的接口时，会先进行下面这些权限判断 // 再进行具体的业务逻辑 @Before(\\\"check() && @annotation(apiLimitedRole)\\\") public void doBefore(JoinPoint joinPoint, ApiLimitedRole apiLimitedRole){ // 通用的判断权限的业务逻辑 // ...... } } \"]},\"85\":{\"h\":\"三、应用注解\",\"t\":[\"@ApiLimitedRole(limitedRoleCodeList = {AuthRoleConstant.ROLE_LV0}) @DataLimited @PostMapping(\\\"/user-moments\\\") public JsonResponse<String> addUserMoments(@RequestBody UserMoment userMoment) throws Exception { // 具体的业务逻辑 // ...... return JsonResponse.success(); } \"]},\"86\":{\"h\":\"Spring AOP的实现原理\",\"t\":[\"Spring这个优秀的框架中，有很多设计模式的体现，比如单例模式，再比如AOP机制也应用了代理模式。\",\"那么是如何应用代理模式的呢？\",\"我们最前面定义注解的时候，在注解最上面用了一个@Component让Spring进行管理，这个我们自己定义的注解就成了Spring管理的一个Bean对象，然后我们为这个对象配置了一个切面。那么Spring在创建这个Bean的时候，实际上创建的是这个Bean的代理对象，后续对Bean中方法的调用，实际上是代理类重写的代理方法。\",\"AOP使用的是两种动态代理，一种是JDK的动态代理，一种是CGLib的动态代理。\",\"那么什么是动态代理？什么是静态代理？\",\"动态代理比静态代理更加灵活，动态代理只需要实现接口即可，而对于静态代理，如果接口中的方法变了，目标对象和代理对象都要进行修改。\",\"再说这两种动态代理方法有什么区别？\",\"如果被代理的类有实现的接口，那就是JDK代理类；如果没有实现接口，是继承实现的，那就是CGLib动态代理类。\"]},\"87\":{\"c\":[\"Java\",\"Spring\"]},\"88\":{\"c\":[\"重要\",\"原创\"]},\"89\":{\"h\":\"掌握Java反射\",\"t\":[\"我们在业务开发中，为一个类设置属性，最常见的是这样的。\",\"User user = new User(); user.setName(\\\"Feifei\\\"); \",\"在这种情况下，初始化一个类之前我们已经知道这是一个什么类了，直接调用构造方法类即可。\",\"但是这是在我们一开始，就知道这是一个什么样的类的前提下，如果我们不知道这是一个什么样的类，也就没法直接new一个对象来调用构造方法了。这其实就是反射的特点。\"]},\"90\":{\"h\":\"概念\",\"t\":[\"通过反射，能够在运行时分析类以及执行类中方法，可以获取一个类中所有的属性和方法，还可以调用这些属性和方法。\",\"应用场景比如Spring、Mybatis框架，底层原理都大量应用了反射机制。Spring AOP的JDK动态代理中，也应用了Method的API。\"]},\"91\":{\"h\":\"API\",\"t\":[\"// Class.forName 通过类的包名获取反射类 Class clazz = Class.forName(\\\"com.houbingzhi.s39.User\\\"); // 通过Class对象获取构造方法Construct对象 Constructor constructor = clazz.getConstructor(); // 通过Construct对象初始化反射类对象 Object object = constructor.newInstance(); // 获取要调用的方法的Method对象 Method setNameMethod = clazz.getMethod(\\\"setName\\\", String.class); Method getNameMethod = clazz.getMethod(\\\"getName\\\"); // 通过invoke方法执行 setNameMethod.invoke(object, \\\"Feifei\\\"); getNameMethod.invoke(object) \"]},\"92\":{\"c\":[\"Java基础\"]},\"93\":{\"c\":[\"重要\"]},\"94\":{\"h\":\"HashMap的扩容是怎么实现的\"},\"95\":{\"h\":\"HashMap的底层存储\",\"t\":[\"HashMap的底层是用数组实现的，当需要存储元素的时候，不断put元素进去，达到一定容量后会扩容，一是能存储的元素更多了，二是因为位置多了，查询效率也会更快，之前可能多个元素会通过拉链法放在同一个索引上，查询的时候还需要遍历链表，时间复杂度O(n)，如果位置多了，一个元素占一个索引，查找的时间复杂度就是O(1)。\"]},\"96\":{\"h\":\"扩容机制\",\"t\":[\"数组是无法自动进行扩容的，HashMap的resize()方法会声明一个更大容量的数组，将之前旧的小容量数组中的元素复制过去，并且重新计算hash值，计算hash值是为了将元素分布得更均匀，减少hash碰撞，这个计算hash值的过程是比较耗时的。\"]},\"97\":{\"c\":[\"Java基础\",\"HashMap\"]},\"98\":{\"c\":[\"重要\"]},\"99\":{\"h\":\"抽象类和接口的区别是什么\",\"t\":[\"抽象类的声明是abstract class 类名，接口的声明是public interface 接口名。\",\"一个类只能继承一个抽象类，但是能实现多个接口。\",\"接口主要是对类的行为进行约束，一个类实现某个接口也就拥有了对应的行为。抽象类主要用于代码复用，强调所属关系。\",\"接口中的成员变量只能是public static final类型的，并且要有初始值，不能被修改。抽象类中的成员变量默认default，并且可以被重新赋值和修改。\"]},\"100\":{\"c\":[\"Java基础\"]},\"101\":{\"c\":[\"重要\",\"面试\"]},\"102\":{\"h\":\"1.无重复字符的最长字串\"},\"103\":{\"h\":\"题目\",\"t\":[\"给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\",\"输入：\\\"abc\\\" 输出：3 \",\"输入：\\\"ababc\\\" 输出：3 \"]},\"104\":{\"h\":\"思路\",\"t\":[\"本题有两个关键点，不含重复字符和最长子串。\",\"看到最长子串，可以想到滑动窗口，比如遍历\\\"ababc\\\"字符串，第一次碰到重复的字符a时，就计算这个字符下标之后的长度即\\\"abc\\\"，就像一个滑动的窗口，直到遇到再次重复的时候。\",\"字符串一共有128个ASCII码，可以声明一个数组，记录当前字符出现的上一次下标，如果没有出现过，默认为-1。\",\"并且start记录每个不重复字符串的初始位置，记录每个字符出现的下标，如果下次访问发现不为-1，说明出现过，start更新为这个下标的下一个。\",\"public int findLongest(String s){ int[] last = new int[128]; Arrays.fill(last,-1); int start = 0; int res = 0; for(int i = 0;i < s.length();i++){ int index = s.charAt(i); start = Math.max(start,last[index] + 1); res = Math.max(res,i-start+1); last[index] = i; } return res; } \"]},\"105\":{\"c\":[\"算法\",\"字符串\"]},\"106\":{\"c\":[\"滑动窗口\",\"字节面试题\",\"已做4遍\"]},\"107\":{\"h\":\"2.反转链表\"},\"108\":{\"h\":\"题目\",\"t\":[\"输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1] \"]},\"109\":{\"h\":\"思路\",\"t\":[\"比如原链表是1->2->3->4->5->null，反转后应该是5->4->3->2->1->null。\",\"更清楚的：\",\"反转前：1->2->3->4->5->null 反转后：null<-1<-2<-3<-4<-5 \",\"我们注意到，节点具体的值和位置是不变的，变的只是指针和null值的位置。\",\"那么我们可以采用双指针的解法，一个pre指针指向head的前一位，用来反转后代表null值（null<-1<-2<-3<-4<-5）。\",\"一个cur指针从head开始往后遍历原链表，并且每遍历一个节点，指针要向前反转一次，直到遇到原链表的null值，此时pre值指向链表的最后一个节点，最后return pre即可。\",\"但是这个过程中有个问题，我们来模拟一下。一开始，pre指针指向null值，cur指针指向head节点，cur指针的next指针指向pre后，pre向后遍历，但是cur再向后遍历时候，发现指针已经没了(为了便于区分，...代表中间什么东西也没有，也就是无next指针，此时null<-1...2->3->4->5->null)，如何再向下一个遍历？\",\"我们可以定义个temp来临时保存cur的下一个指针即可，即temp=cur.next。这个temp是用来cur指针下一步遍历的。\",\" class ListNode{ int val; ListNode next; // 别忘了写构造方法 ListNode(){} ListNode(int val){ this.val = val; } ListNode(int val,ListNode next){ this.val = val; this.next = next; } } class Solution{ public ListNode reverse(ListNode head){ if(head == null){ return null; } ListNode pre = null; ListNode cur = head; while(cur != null){ ListNode temp = cur.next; // cur的next指针指向pre cur.next = pre; // pre移动到cur的位置 pre = cur; // cur指针往后走一步 cur = temp; } return pre; } } \"]},\"110\":{\"c\":[\"算法\",\"链表\"]},\"111\":{\"c\":[\"双指针\",\"面试高频\",\"已做7遍\"]},\"112\":{\"h\":\"3.二叉树的直径\"},\"113\":{\"h\":\"题目\",\"t\":[\"给你一棵二叉树的根节点，返回该树的最大直径。\",\"二叉树的直径是指两个节点之间的最大距离，不一定经过根节点。比如下面这颗树：\",\"输入：[1,2,3,4,5] 输出：3 解释：取路径[4,2,1,3]或者[5,2,1,3]的长度 \"]},\"114\":{\"h\":\"思路\",\"t\":[\"找到最大直径，其实就是维护一个最大值，这个最大值是，所有的节点的左子树和右子树之和中的最大值。因为二叉树本身就是一个递归的结构，所以我们可以递归遍历二叉树的每一个节点。\",\"那最大值怎么维护？\",\"如果当前节点的左右子树不为空，左右路径的大小即上一个节点的左右路径大小加一。\",\"上一个节点的左右路径大小怎么保存下来？\",\"遍历每一个节点时候，保存最大值时，同时返回当前节点的最大路径即可。\"]},\"115\":{\"h\":\"代码\",\"t\":[\"class TreeNode{ int val; TreeNode left; TreeNode right; TreeNode(){} TreeNode(int val){ this.val = val; } TreeNode(int val,TreeNode left,TreeNode right){ this.val = val; this.left = left; this.right = right; } } class Solution{ int max = 0; public int findMaxSize(TreeNode root){ if(root == null){ return 0; } dfs(root); return max; } private int dfs(TreeNode root){ if(root.left == null && root.right == null){ return 0; } int leftSize = root.left == null ? 0 : dfs(root.left) + 1; int rightSize = root.right == null ? 0 : dfs(root.right) + 1; max = Math.max(max,leftSize + rightSize); return Math.max(leftSize,rightSize); } } \"]},\"116\":{\"c\":[\"二叉树\",\"递归\"]},\"117\":{\"c\":[\"已做3遍\"]},\"118\":{\"h\":\"4.岛屿数量\"},\"119\":{\"h\":\"题目\",\"t\":[\"给你一个由'1'(陆地)和'0'(水)组成的二维网格，请你计算网格中的岛屿数量。\",\"岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。\",\"此外，你可以假设该网格的四条边均被水包围。\",\"输入：grid = [ [\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"], [\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"] ] 输出：1 \"]},\"120\":{\"h\":\"思路\",\"t\":[\"首先，我们要在二维矩阵中找到第一个'1'出现的位置，这一步是毫无疑问的。那我们如何找到水平方向和竖直方向上是否有连接的陆地，并且统计岛屿数量呢？\",\"比如我们找到第一个'1'出现的位置后，可以向左搜索，看看为不为'1'，再回到原位，向右搜索，看看为不为'1'......这不就是DFS的算法吗，\\\"不到黄河不回头\\\"，可劲搜，直到走到头再回来继续朝另一个方向搜，发现为'0'，就跳出搜索。\",\"那知道怎么搜之后，岛屿数量是多少呢？下次搜如何避免重复统计呢？\",\"在dfs搜索之前，一旦遍历到一个'1'，就统计+1，因为dfs不论有没有搜到'1'，有没有连接多个'1'变成一个岛屿，最后都是一个岛屿，只不过是岛屿的大小而已。\",\"不难写出以下代码。\",\"public int findOnes(char[][] grid){ int res = 0; for(int i = 0;i < grid.length;i++){ for(int j = 0;j < grid[0].length;j++){ if(grid[i][j] == '1'){ res++; dfs(i,j,grid); } } } return res; } private void dfs(int i,int j,char[][] grid){ // 跳出搜索条件，注意边界条件 if(i < 0 || i > grid.length-1 || j < 0 || j > grid[0].length-1 || grid[i][j] == '0'){ return; } grid[i][j] = '0'; dfs(i+1,j,grid); dfs(i-1,j,grid); dfs(i,j+1,grid); dfs(i,j-1,grid); } \"]},\"121\":{\"c\":[\"DFS\"]},\"122\":{\"c\":[\"递归\",\"面试高频\",\"已做三遍\"]},\"123\":{\"h\":\"5.字符串相加\",\"t\":[\"给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。\",\"你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。\",\"输入：num1 = \\\"11\\\", num2 = \\\"123\\\" 输出：\\\"134\\\" \"]},\"124\":{\"h\":\"思路\",\"t\":[\"如果字符串不能转成整型再相加，我们可以模拟一下两数相加的过程。要注意如何进位，进位后当前结果是什么，下一个结果怎么计算，如何处理溢出情况。\",\"public String calculateString(String num1,String num2){ StringBuilder res = new StringBuilder(\\\"\\\"); int i = num1.length()-1; int j = num2.length()-1; int carry = 0; while(i >= 0 || j >= 0){ // 将字符串暂时处理成整数的操作 int m = i >= 0 ? num1.charAt(i)-'0' : 0; int n = j >= 0 ? num2.charAt(j)-'0' : 0; int temp = m + n + carry; carry = temp / 10; res.append(temp%10); // 不要忘记移动指针 i--; j--; } if(carry == 1){ res.append(carry); } return res.reverse().toString(); } \"]},\"125\":{\"c\":[\"模拟\"]},\"126\":{\"c\":[\"面试高频\",\"双指针\"]},\"127\":{\"h\":\"Posts\"},\"128\":{\"h\":\"Java\"},\"129\":{\"h\":\"Leetcode\"}},\"dirtCount\":0,\"index\":[[\"模拟\",{\"2\":{\"125\":1}}],[\"将字符串暂时处理成整数的操作\",{\"1\":{\"124\":1}}],[\"将之前旧的小容量数组中的元素复制过去\",{\"1\":{\"96\":1}}],[\"||\",{\"1\":{\"120\":4,\"124\":1}}],[\"注意边界条件\",{\"1\":{\"120\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"40\":1}}],[\"跳出搜索条件\",{\"1\":{\"120\":1}}],[\"变成一个岛屿\",{\"1\":{\"120\":1}}],[\"变的只是指针和null值的位置\",{\"1\":{\"109\":1}}],[\"下一个结果怎么计算\",{\"1\":{\"124\":1}}],[\"下一篇\",{\"1\":{\"5\":1}}],[\"下次搜如何避免重复统计呢\",{\"1\":{\"120\":1}}],[\"发现为\",{\"1\":{\"120\":1}}],[\"发现指针已经没了\",{\"1\":{\"109\":1}}],[\"看看为不为\",{\"1\":{\"120\":2}}],[\"看到最长子串\",{\"1\":{\"104\":1}}],[\"出现的位置后\",{\"1\":{\"120\":1}}],[\"出现的位置\",{\"1\":{\"120\":1}}],[\"首先\",{\"1\":{\"120\":1}}],[\"岛屿总是被水包围\",{\"1\":{\"119\":1}}],[\"岛屿数量是多少呢\",{\"1\":{\"120\":1}}],[\"岛屿数量\",{\"0\":{\"118\":1}}],[\"组成的二维网格\",{\"1\":{\"119\":1}}],[\"水\",{\"1\":{\"119\":1}}],[\"陆地\",{\"1\":{\"119\":1}}],[\"递归\",{\"2\":{\"116\":1,\"122\":1}}],[\"同时返回当前节点的最大路径即可\",{\"1\":{\"114\":1}}],[\"保存最大值时\",{\"1\":{\"114\":1}}],[\"保证同一时间只有一个用户线程更新缓存\",{\"1\":{\"66\":1}}],[\"遍历每一个节点时候\",{\"1\":{\"114\":1}}],[\"左右路径的大小即上一个节点的左右路径大小加一\",{\"1\":{\"114\":1}}],[\"所有的节点的左子树和右子树之和中的最大值\",{\"1\":{\"114\":1}}],[\"所以给切面中具体的类加上\",{\"1\":{\"81\":1}}],[\"所以我们可以递归遍历二叉树的每一个节点\",{\"1\":{\"114\":1}}],[\"所以我们需要把这些公共的代码抽出来\",{\"1\":{\"81\":1}}],[\"所以我们用redis进行缓存\",{\"1\":{\"64\":1}}],[\"所以查询很快\",{\"1\":{\"64\":1}}],[\"所以显而易见\",{\"1\":{\"62\":1}}],[\"所以用什么技术\",{\"1\":{\"56\":1}}],[\"所以\",{\"1\":{\"55\":1}}],[\"其实就是维护一个最大值\",{\"1\":{\"114\":1}}],[\"找到最大直径\",{\"1\":{\"114\":1}}],[\"找到master的最新记录\",{\"1\":{\"62\":1}}],[\"取路径\",{\"1\":{\"113\":1}}],[\"解释\",{\"1\":{\"113\":1}}],[\"返回该树的最大直径\",{\"1\":{\"113\":1}}],[\"返回顶部按钮\",{\"1\":{\"5\":1,\"43\":1}}],[\"给定两个字符串形式的非负整数\",{\"1\":{\"123\":1}}],[\"给定一个字符串\",{\"1\":{\"103\":1}}],[\"给你一个由\",{\"1\":{\"119\":1}}],[\"给你一棵二叉树的根节点\",{\"1\":{\"113\":1}}],[\"已做三遍\",{\"2\":{\"122\":1}}],[\"已做3遍\",{\"2\":{\"117\":1}}],[\"已做7遍\",{\"2\":{\"111\":1}}],[\"已做4遍\",{\"2\":{\"106\":1}}],[\"双指针\",{\"2\":{\"111\":1,\"126\":1}}],[\"链表\",{\"2\":{\"110\":1}}],[\"链接\",{\"1\":{\"5\":1,\"17\":1}}],[\"别忘了写构造方法\",{\"1\":{\"109\":1}}],[\"指针要向前反转一次\",{\"1\":{\"109\":1}}],[\"节点具体的值和位置是不变的\",{\"1\":{\"109\":1}}],[\"更清楚的\",{\"1\":{\"109\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"43\":1}}],[\"更新时间\",{\"1\":{\"5\":1}}],[\"反转后\",{\"1\":{\"109\":1}}],[\"反转后应该是5\",{\"1\":{\"109\":1}}],[\"反转前\",{\"1\":{\"109\":1}}],[\"反转链表\",{\"0\":{\"107\":1}}],[\"5\",{\"0\":{\"123\":1},\"1\":{\"108\":2,\"109\":2,\"113\":2}}],[\"4<\",{\"1\":{\"109\":2}}],[\"4\",{\"0\":{\"118\":1},\"1\":{\"108\":2,\"113\":2}}],[\"字节面试题\",{\"2\":{\"106\":1}}],[\"字符串相加\",{\"0\":{\"123\":1}}],[\"字符串一共有128个ascii码\",{\"1\":{\"104\":1}}],[\"字符串\",{\"1\":{\"104\":1},\"2\":{\"105\":1}}],[\"滑动窗口\",{\"2\":{\"106\":1}}],[\"算法\",{\"2\":{\"105\":1,\"110\":1}}],[\"+\",{\"1\":{\"104\":1,\"115\":3,\"124\":2}}],[\"<\",{\"1\":{\"104\":1,\"120\":4}}],[\"说明出现过\",{\"1\":{\"104\":1}}],[\"记录每个字符出现的下标\",{\"1\":{\"104\":1}}],[\"记录当前字符出现的上一次下标\",{\"1\":{\"104\":1}}],[\"默认为\",{\"1\":{\"104\":1}}],[\"直到走到头再回来继续朝另一个方向搜\",{\"1\":{\"120\":1}}],[\"直到遇到原链表的null值\",{\"1\":{\"109\":1}}],[\"直到遇到再次重复的时候\",{\"1\":{\"104\":1}}],[\"直接调用构造方法类即可\",{\"1\":{\"89\":1}}],[\"第一次碰到重复的字符a时\",{\"1\":{\"104\":1}}],[\"第一步就是先定义自己的注解\",{\"1\":{\"83\":1}}],[\"本题有两个关键点\",{\"1\":{\"104\":1}}],[\"本页面就是一个示例\",{\"1\":{\"5\":1}}],[\"3<\",{\"1\":{\"109\":2}}],[\"3\",{\"0\":{\"112\":1},\"1\":{\"103\":2,\"108\":2,\"113\":4}}],[\"输出\",{\"1\":{\"103\":2,\"108\":1,\"113\":1,\"119\":1,\"123\":1}}],[\"输入\",{\"1\":{\"103\":2,\"108\":1,\"113\":1,\"119\":1,\"123\":1}}],[\"题目\",{\"0\":{\"103\":1,\"108\":1,\"113\":1,\"119\":1}}],[\"无重复字符的最长字串\",{\"0\":{\"102\":1}}],[\"无法访问\",{\"1\":{\"80\":1}}],[\"强调所属关系\",{\"1\":{\"99\":1}}],[\"接口中的成员变量只能是public\",{\"1\":{\"99\":1}}],[\"接口主要是对类的行为进行约束\",{\"1\":{\"99\":1}}],[\"接口名\",{\"1\":{\"99\":1}}],[\"接口的声明是public\",{\"1\":{\"99\":1}}],[\"接口进行权限控制\",{\"1\":{\"80\":1}}],[\"类名\",{\"1\":{\"99\":1}}],[\"抽象类中的成员变量默认default\",{\"1\":{\"99\":1}}],[\"抽象类主要用于代码复用\",{\"1\":{\"99\":1}}],[\"抽象类的声明是abstract\",{\"1\":{\"99\":1}}],[\"抽象类和接口的区别是什么\",{\"0\":{\"99\":1}}],[\"减少hash碰撞\",{\"1\":{\"96\":1}}],[\"方法会声明一个更大容量的数组\",{\"1\":{\"96\":1}}],[\"数组是无法自动进行扩容的\",{\"1\":{\"96\":1}}],[\"数据压根就不存在\",{\"1\":{\"68\":1}}],[\"数据库中没有web应用要请求的数据\",{\"1\":{\"68\":1}}],[\"数据库承受巨大压力\",{\"1\":{\"67\":1}}],[\"数据库压力过大\",{\"1\":{\"65\":1}}],[\"数据库\",{\"2\":{\"51\":1}}],[\"数据库的事务应该具有隔离性\",{\"1\":{\"49\":1}}],[\"数据库应该保持一致性的状态\",{\"1\":{\"48\":1}}],[\"数据库宕机\",{\"1\":{\"47\":1}}],[\"扩容机制\",{\"0\":{\"96\":1}}],[\"扩展\",{\"0\":{\"14\":1,\"15\":1},\"1\":{\"15\":1}}],[\"时间复杂度o\",{\"1\":{\"95\":1}}],[\"之前可能多个元素会通过拉链法放在同一个索引上\",{\"1\":{\"95\":1}}],[\"查找的时间复杂度就是o\",{\"1\":{\"95\":1}}],[\"查询的时候还需要遍历链表\",{\"1\":{\"95\":1}}],[\"查询效率也会更快\",{\"1\":{\"95\":1}}],[\"查看详情\",{\"1\":{\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1}}],[\"达到一定容量后会扩容\",{\"1\":{\"95\":1}}],[\"获取要调用的方法的method对象\",{\"1\":{\"91\":1}}],[\"object\",{\"1\":{\"91\":4}}],[\"order\",{\"1\":{\"84\":1}}],[\"底层原理都大量应用了反射机制\",{\"1\":{\"90\":1}}],[\"能够在运行时分析类以及执行类中方法\",{\"1\":{\"90\":1}}],[\"能够保证消息的可靠性\",{\"1\":{\"56\":1}}],[\"概念\",{\"0\":{\"90\":1}}],[\"初始化一个类之前我们已经知道这是一个什么类了\",{\"1\":{\"89\":1}}],[\"num2\",{\"1\":{\"123\":1,\"124\":3}}],[\"num1\",{\"1\":{\"123\":2,\"124\":3}}],[\"null\",{\"1\":{\"109\":4,\"115\":5}}],[\"null<\",{\"1\":{\"109\":2}}],[\"next\",{\"1\":{\"109\":7}}],[\"newinstance\",{\"1\":{\"91\":1}}],[\"new\",{\"1\":{\"89\":1,\"104\":1,\"124\":1}}],[\"n\",{\"1\":{\"95\":1,\"124\":2}}],[\"nasa\",{\"1\":{\"0\":1}}],[\"掌握java反射\",{\"0\":{\"89\":1}}],[\"那知道怎么搜之后\",{\"1\":{\"120\":1}}],[\"那我们如何找到水平方向和竖直方向上是否有连接的陆地\",{\"1\":{\"120\":1}}],[\"那最大值怎么维护\",{\"1\":{\"114\":1}}],[\"那就是cglib动态代理类\",{\"1\":{\"86\":1}}],[\"那就是jdk代理类\",{\"1\":{\"86\":1}}],[\"那么我们可以采用双指针的解法\",{\"1\":{\"109\":1}}],[\"那么什么是动态代理\",{\"1\":{\"86\":1}}],[\"那么spring在创建这个bean的时候\",{\"1\":{\"86\":1}}],[\"那么是如何应用代理模式的呢\",{\"1\":{\"86\":1}}],[\"那么其中一个解决方案就是\",{\"1\":{\"66\":1}}],[\"那么websocket协议对比http协议的优势在哪呢\",{\"1\":{\"56\":1}}],[\"目标对象和代理对象都要进行修改\",{\"1\":{\"86\":1}}],[\"目录\",{\"0\":{\"3\":1}}],[\"动态代理只需要实现接口即可\",{\"1\":{\"86\":1}}],[\"动态代理比静态代理更加灵活\",{\"1\":{\"86\":1}}],[\"什么是静态代理\",{\"1\":{\"86\":1}}],[\"后续对bean中方法的调用\",{\"1\":{\"86\":1}}],[\"后面进行依赖注入\",{\"1\":{\"83\":1}}],[\"具体的业务逻辑\",{\"1\":{\"85\":1}}],[\"再回到原位\",{\"1\":{\"120\":1}}],[\"再说这两种动态代理方法有什么区别\",{\"1\":{\"86\":1}}],[\"再比如aop机制也应用了代理模式\",{\"1\":{\"86\":1}}],[\"再进行具体的业务逻辑\",{\"1\":{\"84\":1}}],[\"再把暂存的feature提交接上去\",{\"1\":{\"62\":1}}],[\"usermoment\",{\"1\":{\"85\":2}}],[\"user\",{\"1\":{\"85\":1,\"89\":4,\"91\":1}}],[\"userroleservice\",{\"1\":{\"84\":2}}],[\"usersupport\",{\"1\":{\"84\":2}}],[\"carry\",{\"1\":{\"124\":5}}],[\"calculatestring\",{\"1\":{\"124\":1}}],[\"cur的next指针指向pre\",{\"1\":{\"109\":1}}],[\"cur\",{\"1\":{\"109\":6}}],[\"cur指针往后走一步\",{\"1\":{\"109\":1}}],[\"cur指针的next指针指向pre后\",{\"1\":{\"109\":1}}],[\"cur指针指向head节点\",{\"1\":{\"109\":1}}],[\"char\",{\"1\":{\"120\":2}}],[\"charat\",{\"1\":{\"104\":1,\"124\":2}}],[\"check\",{\"1\":{\"84\":2}}],[\"clazz\",{\"1\":{\"91\":4}}],[\"class\",{\"1\":{\"84\":1,\"91\":4,\"99\":1,\"109\":2,\"115\":2}}],[\"color\",{\"1\":{\"26\":1}}],[\"component让spring进行管理\",{\"1\":{\"86\":1}}],[\"component\",{\"1\":{\"83\":2,\"84\":1}}],[\"com\",{\"1\":{\"26\":2,\"84\":1,\"91\":1}}],[\"constructor\",{\"1\":{\"91\":3}}],[\"const\",{\"1\":{\"17\":1}}],[\"定义切面\",{\"0\":{\"84\":1}}],[\"切面才能工作\",{\"1\":{\"83\":1}}],[\"切问而近思\",{\"1\":{\"0\":1}}],[\"确定这个注解的位置后\",{\"1\":{\"83\":1}}],[\"声明注解\",{\"0\":{\"83\":1}}],[\"需要在切面里写\",{\"1\":{\"82\":1}}],[\"需求开发分支\",{\"1\":{\"62\":1}}],[\"代表中间什么东西也没有\",{\"1\":{\"109\":1}}],[\"代表生命周期\",{\"1\":{\"83\":1}}],[\"代表在目标方法调用之前执行\",{\"1\":{\"81\":1}}],[\"代码实现\",{\"0\":{\"82\":1}}],[\"代码演示\",{\"0\":{\"33\":1}}],[\"代码块\",{\"0\":{\"18\":1}}],[\"代码\",{\"0\":{\"115\":1},\"1\":{\"17\":1}}],[\"都需要先判断权限\",{\"1\":{\"81\":1}}],[\"都是错的\",{\"1\":{\"59\":1}}],[\"叫切面\",{\"1\":{\"81\":1}}],[\"进位后当前结果是什么\",{\"1\":{\"124\":1}}],[\"进去的操作\",{\"1\":{\"81\":1}}],[\"进行引用\",{\"1\":{\"42\":2}}],[\"织入\",{\"1\":{\"81\":1}}],[\"只不过是岛屿的大小而已\",{\"1\":{\"120\":1}}],[\"只需要关注具体不同的逻辑即可\",{\"1\":{\"81\":1}}],[\"只用mysql进行查询是比较耗时的\",{\"1\":{\"64\":1}}],[\"思路\",{\"0\":{\"81\":1,\"104\":1,\"109\":1,\"114\":1,\"120\":1,\"124\":1}}],[\"每个接口都进行判断\",{\"1\":{\"80\":1}}],[\"分布式文件系统岗位\",{\"2\":{\"78\":1}}],[\"分类为\",{\"1\":{\"41\":1}}],[\"封装成数据帧发送到网络上\",{\"1\":{\"76\":1}}],[\"帮助实现通信\",{\"1\":{\"75\":1}}],[\"作为数据传输的媒介\",{\"1\":{\"75\":1}}],[\"作者设置为\",{\"1\":{\"41\":1}}],[\"高效\",{\"1\":{\"75\":1}}],[\"传输数据从应用层传到传输层之后\",{\"1\":{\"74\":1}}],[\"传输控制协议tcp\",{\"1\":{\"74\":1}}],[\"传输层只负责服务好应用\",{\"1\":{\"75\":1}}],[\"传输层为上层\",{\"1\":{\"74\":1}}],[\"传输层\",{\"0\":{\"74\":1},\"1\":{\"71\":1}}],[\"该层有两个传输协议\",{\"1\":{\"74\":1}}],[\"应用场景比如spring\",{\"1\":{\"90\":1}}],[\"应用注解\",{\"0\":{\"85\":1}}],[\"应用数据从应用层传到传输层\",{\"1\":{\"73\":1}}],[\"应用层只需要专注为用户提供服务\",{\"1\":{\"72\":1}}],[\"应用层是用户直接接触到的最上层\",{\"1\":{\"72\":1}}],[\"应用层\",{\"0\":{\"72\":1}}],[\"格式也只需要前后端协商好即可\",{\"1\":{\"73\":1}}],[\"浏览器对body的大小没有限制\",{\"1\":{\"73\":1}}],[\"除了get请求\",{\"1\":{\"73\":1}}],[\"除此之外\",{\"1\":{\"56\":1}}],[\"又包含视频等\",{\"1\":{\"73\":1}}],[\"又为什么选择了java后端\",{\"1\":{\"0\":1}}],[\"经浏览器解析后\",{\"1\":{\"73\":1}}],[\"视频\",{\"1\":{\"73\":1}}],[\"通用的判断权限的业务逻辑\",{\"1\":{\"84\":1}}],[\"通常会在浏览器的搜索框携带一些参数\",{\"1\":{\"73\":1}}],[\"通过invoke方法执行\",{\"1\":{\"91\":1}}],[\"通过construct对象初始化反射类对象\",{\"1\":{\"91\":1}}],[\"通过class对象获取构造方法construct对象\",{\"1\":{\"91\":1}}],[\"通过类的包名获取反射类\",{\"1\":{\"91\":1}}],[\"通过反射\",{\"1\":{\"90\":1}}],[\"通过\",{\"1\":{\"13\":1,\"16\":1}}],[\"以body的形式通过tcp协议存到服务器中\",{\"1\":{\"73\":1}}],[\"以http协议举例\",{\"0\":{\"73\":1}}],[\"以便\",{\"1\":{\"11\":1}}],[\"solution\",{\"1\":{\"109\":1,\"115\":1}}],[\"s\",{\"1\":{\"103\":1,\"104\":3}}],[\"start+1\",{\"1\":{\"104\":1}}],[\"start\",{\"1\":{\"104\":3}}],[\"start更新为这个下标的下一个\",{\"1\":{\"104\":1}}],[\"static\",{\"1\":{\"99\":1}}],[\"stringbuilder\",{\"1\":{\"124\":2}}],[\"string\",{\"1\":{\"83\":1,\"91\":1,\"104\":1,\"124\":3}}],[\"s39\",{\"1\":{\"91\":1}}],[\"setnamemethod\",{\"1\":{\"91\":2}}],[\"setname\",{\"1\":{\"89\":1,\"91\":1}}],[\"spring这个优秀的框架中\",{\"1\":{\"86\":1}}],[\"spring\",{\"0\":{\"86\":1},\"1\":{\"90\":1},\"2\":{\"87\":1}}],[\"success\",{\"1\":{\"85\":1}}],[\"smtp简单邮件传输协议\",{\"1\":{\"72\":1}}],[\"svg\",{\"1\":{\"26\":1}}],[\"网络之间实际的传输功能是由网络层实现的\",{\"1\":{\"75\":1}}],[\"网络接口层\",{\"0\":{\"76\":1},\"1\":{\"71\":1}}],[\"网络层提供了ip协议\",{\"1\":{\"75\":1}}],[\"网络层\",{\"0\":{\"75\":1},\"1\":{\"71\":1}}],[\"从上到下分别是应用层\",{\"1\":{\"71\":1}}],[\"实际上是代理类重写的代理方法\",{\"1\":{\"86\":1}}],[\"实际上创建的是这个bean的代理对象\",{\"1\":{\"86\":1}}],[\"实际上可能不存在\",{\"1\":{\"68\":1}}],[\"实际的文章内容\",{\"1\":{\"8\":1}}],[\"先查布隆\",{\"1\":{\"68\":1}}],[\"布隆过滤器\",{\"1\":{\"68\":1}}],[\"布局与功能禁用\",{\"0\":{\"5\":1}}],[\"三\",{\"0\":{\"85\":1},\"1\":{\"68\":1}}],[\"二叉树\",{\"2\":{\"116\":1}}],[\"二叉树的直径是指两个节点之间的最大距离\",{\"1\":{\"113\":1}}],[\"二叉树的直径\",{\"0\":{\"112\":1}}],[\"二是因为位置多了\",{\"1\":{\"95\":1}}],[\"二是长连接\",{\"1\":{\"56\":1}}],[\"二\",{\"0\":{\"84\":1},\"1\":{\"68\":1}}],[\"未能获取互斥锁的请求\",{\"1\":{\"66\":1}}],[\"还可以调用这些属性和方法\",{\"1\":{\"90\":1}}],[\"还有一个点就是缓存无法命中的场景\",{\"1\":{\"66\":1}}],[\"还不会编写\",{\"1\":{\"12\":1}}],[\"或者\",{\"1\":{\"113\":1}}],[\"或者当热点数据快要过期的时候\",{\"1\":{\"66\":1}}],[\"或者构建比较复杂的数据\",{\"1\":{\"64\":1}}],[\"由后台异步更新缓存\",{\"1\":{\"66\":1}}],[\"如何处理溢出情况\",{\"1\":{\"124\":1}}],[\"如何再向下一个遍历\",{\"1\":{\"109\":1}}],[\"如何解决\",{\"0\":{\"66\":1,\"68\":1}}],[\"如果字符串不能转成整型再相加\",{\"1\":{\"124\":1}}],[\"如果当前节点的左右子树不为空\",{\"1\":{\"114\":1}}],[\"如果下次访问发现不为\",{\"1\":{\"104\":1}}],[\"如果没有出现过\",{\"1\":{\"104\":1}}],[\"如果没有实现接口\",{\"1\":{\"86\":1}}],[\"如果位置多了\",{\"1\":{\"95\":1}}],[\"如果被代理的类有实现的接口\",{\"1\":{\"86\":1}}],[\"如果接口中的方法变了\",{\"1\":{\"86\":1}}],[\"如果权限不足\",{\"1\":{\"80\":1}}],[\"如果布隆判断不存在\",{\"1\":{\"68\":1}}],[\"如果存在再向缓存中查询数据\",{\"1\":{\"68\":1}}],[\"如果不存在就直接返回\",{\"1\":{\"68\":1}}],[\"如果我们不知道这是一个什么样的类\",{\"1\":{\"89\":1}}],[\"如果我们在feature分支开发一段时间后\",{\"1\":{\"62\":1}}],[\"如果我们采用传统的http协议\",{\"1\":{\"55\":1}}],[\"如果此时有两个分支\",{\"1\":{\"62\":1}}],[\"如果服务器此时就没有新增的资源\",{\"1\":{\"55\":1}}],[\"如果有\",{\"1\":{\"55\":1}}],[\"如果你不了解它\",{\"1\":{\"13\":1}}],[\"如果你是一个新手\",{\"1\":{\"12\":1}}],[\"可劲搜\",{\"1\":{\"120\":1}}],[\"可维护性不高\",{\"1\":{\"80\":1}}],[\"可能会存在哈希碰撞的问题\",{\"1\":{\"68\":1}}],[\"可能会有宕机的风险\",{\"1\":{\"65\":1}}],[\"可能是恶意请求\",{\"1\":{\"68\":1}}],[\"可以向左搜索\",{\"1\":{\"120\":1}}],[\"可以声明一个数组\",{\"1\":{\"104\":1}}],[\"可以想到滑动窗口\",{\"1\":{\"104\":1}}],[\"可以获取一个类中所有的属性和方法\",{\"1\":{\"90\":1}}],[\"可以用\",{\"1\":{\"81\":1}}],[\"可以用git\",{\"1\":{\"62\":1}}],[\"可以设置互斥锁\",{\"1\":{\"66\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"11\":1}}],[\"就统计+1\",{\"1\":{\"120\":1}}],[\"就跳出搜索\",{\"1\":{\"120\":1}}],[\"就像一个滑动的窗口\",{\"1\":{\"104\":1}}],[\"就像任何操作没有进行的样子\",{\"1\":{\"47\":1}}],[\"就计算这个字符下标之后的长度即\",{\"1\":{\"104\":1}}],[\"就知道这是一个什么样的类的前提下\",{\"1\":{\"89\":1}}],[\"就能实现权限判断\",{\"1\":{\"82\":1}}],[\"就是http的get请求\",{\"1\":{\"73\":1}}],[\"就一定不存在\",{\"1\":{\"68\":1}}],[\"就无法构建缓存\",{\"1\":{\"67\":1}}],[\"就去数据库中请求数据\",{\"1\":{\"65\":1,\"67\":1}}],[\"到redis读取数据\",{\"1\":{\"65\":1,\"67\":1}}],[\"当需要存储元素的时候\",{\"1\":{\"95\":1}}],[\"当传输数据+tcp头+ip头传输到网络接口层时\",{\"1\":{\"76\":1}}],[\"当传输数据+tcp头部传到网络层时\",{\"1\":{\"75\":1}}],[\"当线上发现发生缓存穿透的问题\",{\"1\":{\"68\":1}}],[\"当web应用触发请求\",{\"1\":{\"65\":1,\"67\":1}}],[\"当数据量达到一定数量级后\",{\"1\":{\"64\":1}}],[\"滴滴面试题\",{\"1\":{\"64\":1}}],[\"今天来重点讲一下缓存击穿和缓存穿透\",{\"1\":{\"64\":1}}],[\"缓存\",{\"2\":{\"70\":1}}],[\"缓存空值或默认值\",{\"1\":{\"68\":1}}],[\"缓存无法命中\",{\"1\":{\"65\":1,\"67\":1}}],[\"缓存穿透\",{\"0\":{\"67\":1},\"1\":{\"64\":1}}],[\"缓存击穿的原因就是热点数据缓存过期\",{\"1\":{\"66\":1}}],[\"缓存击穿\",{\"0\":{\"65\":1},\"1\":{\"64\":1}}],[\"缓存击穿和缓存穿透如何解决\",{\"0\":{\"64\":1}}],[\"因为dfs不论有没有搜到\",{\"1\":{\"120\":1}}],[\"因为二叉树本身就是一个递归的结构\",{\"1\":{\"114\":1}}],[\"因为网络之间的传输过程是错综复杂的\",{\"1\":{\"75\":1}}],[\"因为布隆过滤器底层是由位图数组和哈希算法实现的\",{\"1\":{\"68\":1}}],[\"因为是基于内存的数据库\",{\"1\":{\"64\":1}}],[\"因此可以借助于\",{\"1\":{\"14\":1}}],[\"因此\",{\"1\":{\"11\":1}}],[\"热点数据\",{\"1\":{\"64\":1}}],[\"使用git\",{\"1\":{\"62\":1}}],[\"使用指南\",{\"1\":{\"41\":2},\"2\":{\"4\":1,\"6\":1,\"9\":1,\"38\":1,\"44\":1,\"45\":1}}],[\"然后我们为这个对象配置了一个切面\",{\"1\":{\"86\":1}}],[\"然后删掉feature的提交记录\",{\"1\":{\"62\":1}}],[\"然后看到了视频上方的弹幕\",{\"1\":{\"54\":1}}],[\"要注意如何进位\",{\"1\":{\"124\":1}}],[\"要么等待锁释放后重新读取缓存\",{\"1\":{\"66\":1}}],[\"要么返回空值或者默认值\",{\"1\":{\"66\":1}}],[\"要么全部不发生\",{\"1\":{\"47\":1}}],[\"要么全部发生\",{\"1\":{\"47\":1}}],[\"要拉取master最新的代码合到feature上\",{\"1\":{\"62\":1}}],[\">=\",{\"1\":{\"124\":4}}],[\">\",{\"1\":{\"120\":2}}],[\">1\",{\"1\":{\"109\":1}}],[\">null\",{\"1\":{\"109\":4}}],[\">5\",{\"1\":{\"109\":3}}],[\">4\",{\"1\":{\"109\":4}}],[\">3\",{\"1\":{\"109\":4}}],[\">2\",{\"1\":{\"109\":3}}],[\">d\",{\"1\":{\"62\":1}}],[\">c\",{\"1\":{\"62\":1}}],[\">b\",{\"1\":{\"62\":1}}],[\"想拉取master分支的最新代码合并到feature上\",{\"1\":{\"62\":1}}],[\"grid\",{\"1\":{\"119\":1,\"120\":14}}],[\"green\",{\"1\":{\"0\":1}}],[\"getname\",{\"1\":{\"91\":1}}],[\"getnamemethod\",{\"1\":{\"91\":2}}],[\"getmethod\",{\"1\":{\"91\":2}}],[\"getconstructor\",{\"1\":{\"91\":1}}],[\"get请求代表获取某个资源\",{\"1\":{\"73\":1}}],[\"git\",{\"2\":{\"63\":1}}],[\"git的rebase\",{\"0\":{\"62\":1}}],[\"基础语法\",{\"2\":{\"61\":1}}],[\"面试高频\",{\"2\":{\"70\":1,\"111\":1,\"122\":1,\"126\":1}}],[\"面试\",{\"2\":{\"61\":1,\"78\":1,\"101\":1}}],[\"面试题\",{\"2\":{\"52\":1}}],[\"j+1\",{\"1\":{\"120\":1}}],[\"j++\",{\"1\":{\"120\":1}}],[\"j\",{\"1\":{\"120\":12,\"124\":5}}],[\"java\",{\"0\":{\"128\":1},\"2\":{\"87\":1}}],[\"java基础\",{\"2\":{\"60\":1,\"92\":1,\"97\":1,\"100\":1}}],[\"jsonresponse\",{\"1\":{\"85\":1}}],[\"jsonresponse<string>\",{\"1\":{\"85\":1}}],[\"joinpoint\",{\"1\":{\"84\":2}}],[\"jim\",{\"1\":{\"0\":1}}],[\"biginteger\",{\"1\":{\"123\":1}}],[\"bilibili\",{\"1\":{\"84\":1}}],[\"before\",{\"1\":{\"84\":1}}],[\"before注解\",{\"1\":{\"81\":1}}],[\"b\",{\"1\":{\"59\":4}}],[\"b账户应该是300元\",{\"1\":{\"48\":1}}],[\"编译报错\",{\"1\":{\"59\":3}}],[\"编译器会报错\",{\"1\":{\"59\":1}}],[\"编辑此页链接\",{\"1\":{\"5\":1}}],[\"dfs\",{\"1\":{\"115\":4,\"120\":6},\"2\":{\"121\":1}}],[\"datalimited\",{\"1\":{\"85\":1}}],[\"default\",{\"1\":{\"83\":1}}],[\"desc\",{\"1\":{\"26\":1}}],[\"dobefore\",{\"1\":{\"84\":1}}],[\"domain\",{\"1\":{\"84\":1}}],[\"documented\",{\"1\":{\"83\":1}}],[\"document\",{\"1\":{\"83\":1}}],[\"double\",{\"1\":{\"59\":2}}],[\"double类型的值可以赋给long变量吗\",{\"0\":{\"59\":1},\"1\":{\"59\":1}}],[\"dns域名解析服务\",{\"1\":{\"72\":1}}],[\"原创\",{\"2\":{\"58\":1,\"88\":1}}],[\"原子性\",{\"0\":{\"47\":1},\"1\":{\"46\":1}}],[\"项目中需要对前端的元素\",{\"1\":{\"80\":1}}],[\"项目\",{\"2\":{\"58\":1}}],[\"计算它们的和并同样以字符串形式返回\",{\"1\":{\"123\":1}}],[\"计算hash值是为了将元素分布得更均匀\",{\"1\":{\"96\":1}}],[\"计算机网络\",{\"2\":{\"57\":1,\"77\":1}}],[\"计划\",{\"1\":{\"24\":2}}],[\"架构如何设计\",{\"1\":{\"56\":1}}],[\"消息速度更快\",{\"1\":{\"56\":1}}],[\"用来反转后代表null值\",{\"1\":{\"109\":1}}],[\"用户数据报协议udp\",{\"1\":{\"74\":1}}],[\"用户进入我们的系统\",{\"1\":{\"54\":1}}],[\"用websocket的长连接反而会长时间占用内存这些资源\",{\"1\":{\"56\":1}}],[\"用http的短连接更好\",{\"1\":{\"56\":1}}],[\"用长连接更适合\",{\"1\":{\"56\":1}}],[\"并且统计岛屿数量呢\",{\"1\":{\"120\":1}}],[\"并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成\",{\"1\":{\"119\":1}}],[\"并且每遍历一个节点\",{\"1\":{\"109\":1}}],[\"并且start记录每个不重复字符串的初始位置\",{\"1\":{\"104\":1}}],[\"并且可以被重新赋值和修改\",{\"1\":{\"99\":1}}],[\"并且要有初始值\",{\"1\":{\"99\":1}}],[\"并且重新计算hash值\",{\"1\":{\"96\":1}}],[\"并且封装成一个类用来判断权限\",{\"1\":{\"81\":1}}],[\"并且get请求的参数只允许有ascii码\",{\"1\":{\"73\":1}}],[\"并且如果是不需要长时间通信的功能或者接口\",{\"1\":{\"56\":1}}],[\"并且也是基于tcp协议的\",{\"1\":{\"56\":1}}],[\"并且弹幕模块本来就是一个长时间请求弹幕的过程\",{\"1\":{\"56\":1}}],[\"并且是单向的\",{\"1\":{\"55\":1}}],[\"断开连接消耗资源\",{\"1\":{\"56\":1}}],[\"服务端也能向客户端推送资源\",{\"1\":{\"56\":1}}],[\"有没有连接多个\",{\"1\":{\"120\":1}}],[\"有很多设计模式的体现\",{\"1\":{\"86\":1}}],[\"有宕机的风险\",{\"1\":{\"67\":1}}],[\"有时候不好追溯之前的提交\",{\"1\":{\"62\":1}}],[\"有两个很大的优势\",{\"1\":{\"56\":1}}],[\"有个面试官问了一个问题\",{\"1\":{\"0\":1}}],[\"最后都是一个岛屿\",{\"1\":{\"120\":1}}],[\"最后return\",{\"1\":{\"109\":1}}],[\"最后我们为什么采用websocket协议\",{\"1\":{\"56\":1}}],[\"最长子串\",{\"1\":{\"103\":1}}],[\"最常见的是这样的\",{\"1\":{\"89\":1}}],[\"最近在找日常实习的时候\",{\"1\":{\"0\":1}}],[\"while\",{\"1\":{\"109\":1,\"124\":1}}],[\"where\",{\"1\":{\"26\":1}}],[\"websocket\",{\"2\":{\"58\":1}}],[\"websocket协议没有http协议的请求头header\",{\"1\":{\"56\":1}}],[\"websocket好在哪里\",{\"0\":{\"56\":1}}],[\"客户端还是要不断轮询\",{\"1\":{\"55\":1}}],[\"客户端需要不停地轮询服务端\",{\"1\":{\"55\":1}}],[\"拉取资源\",{\"1\":{\"55\":2}}],[\"建立连接和释放连接的过程也是要消耗资源的\",{\"1\":{\"55\":1}}],[\"会先进行下面这些权限判断\",{\"1\":{\"84\":1}}],[\"会有很多重复性的代码\",{\"1\":{\"80\":1}}],[\"会在前后分别加上帧头和帧尾\",{\"1\":{\"76\":1}}],[\"会加上一个ip头部传送给下一层\",{\"1\":{\"75\":1}}],[\"会加上tcp的头部传输给网络层\",{\"1\":{\"74\":1}}],[\"会直接返回给前端\",{\"1\":{\"68\":1}}],[\"会丢掉一部分之前的提交记录\",{\"1\":{\"62\":1}}],[\"会使feature的原基底都变了\",{\"1\":{\"62\":1}}],[\"会使用\",{\"1\":{\"14\":1}}],[\"会进行一个拉取资源的操作\",{\"1\":{\"55\":1}}],[\"效果如何\",{\"1\":{\"55\":1}}],[\"这不就是dfs的算法吗\",{\"1\":{\"120\":1}}],[\"这一步是毫无疑问的\",{\"1\":{\"120\":1}}],[\"这一瞬间大量请求就会打到数据库\",{\"1\":{\"65\":1}}],[\"这其实就是反射的特点\",{\"1\":{\"89\":1}}],[\"这里指发挥作用的注解具体是哪一个\",{\"1\":{\"84\":1}}],[\"这里是runtime\",{\"1\":{\"83\":1}}],[\"这些协议在应用层专注为用户提供协议\",{\"1\":{\"73\":1}}],[\"这种现象的原因就是\",{\"1\":{\"68\":1}}],[\"这时候大量请求又请求数据库\",{\"1\":{\"67\":1}}],[\"这时候需要把feature上的提交暂存下来\",{\"1\":{\"62\":1}}],[\"这个最大值是\",{\"1\":{\"114\":1}}],[\"这个temp是用来cur指针下一步遍历的\",{\"1\":{\"109\":1}}],[\"这个计算hash值的过程是比较耗时的\",{\"1\":{\"96\":1}}],[\"这个我们自己定义的注解就成了spring管理的一个bean对象\",{\"1\":{\"86\":1}}],[\"这个注解是我们自定义的\",{\"1\":{\"82\":1}}],[\"这个封装成的类\",{\"1\":{\"81\":1}}],[\"这个可以\",{\"1\":{\"59\":1}}],[\"这个值也不能赋给long变量\",{\"1\":{\"59\":1}}],[\"这又是对资源的浪费\",{\"1\":{\"55\":1}}],[\"这就是短连接的过程\",{\"1\":{\"55\":1}}],[\"这条弹幕也会推送到所有在线看到视频的用户\",{\"1\":{\"54\":1}}],[\"这是脚注内容\",{\"1\":{\"37\":1}}],[\"自己也可以发送一条弹幕\",{\"1\":{\"54\":1}}],[\"自定义它们\",{\"1\":{\"43\":1}}],[\"自定义对齐\",{\"0\":{\"20\":1}}],[\"自定义标题\",{\"1\":{\"17\":5}}],[\"自定义容器\",{\"0\":{\"17\":1}}],[\"在dfs搜索之前\",{\"1\":{\"120\":1}}],[\"在这种情况下\",{\"1\":{\"89\":1}}],[\"在这个过程中\",{\"1\":{\"81\":1}}],[\"在注解最上面用了一个\",{\"1\":{\"86\":1}}],[\"在调用controller层时的接口时\",{\"1\":{\"84\":1}}],[\"在aop中\",{\"1\":{\"81\":1}}],[\"在web应用请求查询的时候\",{\"1\":{\"68\":1}}],[\"在布隆过滤器上做个标记\",{\"1\":{\"68\":1}}],[\"在向数据库写入数据的时候\",{\"1\":{\"68\":1}}],[\"在redis里缓存一个空值或者默认值\",{\"1\":{\"68\":1}}],[\"在feature分支开发一段时间后\",{\"1\":{\"62\":1}}],[\"在不进行强制转换的情况下\",{\"1\":{\"59\":1}}],[\"在视频列表点进自己感兴趣的视频\",{\"1\":{\"54\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"5\":1}}],[\"场景是这样的\",{\"1\":{\"54\":1}}],[\"功能\",{\"1\":{\"54\":1}}],[\"推送弹幕\",{\"1\":{\"54\":1}}],[\"现在需要实现一个用户发送弹幕和获取弹幕\",{\"1\":{\"54\":1}}],[\"业务背景是一个类似于b站的视频弹幕系统\",{\"1\":{\"54\":1}}],[\"业务需求\",{\"0\":{\"54\":1,\"80\":1}}],[\"重要\",{\"2\":{\"52\":1,\"88\":1,\"93\":1,\"98\":1,\"101\":1}}],[\"重要的内容\",{\"1\":{\"23\":1}}],[\"即temp=cur\",{\"1\":{\"109\":1}}],[\"即使double类型的值是1\",{\"1\":{\"59\":1}}],[\"即使数据库发生宕机\",{\"1\":{\"50\":1}}],[\"即不同事务在不同的空间能够并发执行\",{\"1\":{\"49\":1}}],[\"持久性\",{\"0\":{\"50\":1}}],[\"持久性是手段\",{\"1\":{\"46\":1}}],[\"加起来还是400元\",{\"1\":{\"48\":1}}],[\"加密展示\",{\"1\":{\"3\":1,\"32\":1}}],[\"转账之后\",{\"1\":{\"48\":1}}],[\"比如\",{\"1\":{\"123\":1}}],[\"比如我们找到第一个\",{\"1\":{\"120\":1}}],[\"比如我们打开一个网页\",{\"1\":{\"73\":1}}],[\"比如下面这颗树\",{\"1\":{\"113\":1}}],[\"比如下面这两种写法\",{\"1\":{\"59\":1}}],[\"比如原链表是1\",{\"1\":{\"109\":1}}],[\"比如遍历\",{\"1\":{\"104\":1}}],[\"比如单例模式\",{\"1\":{\"86\":1}}],[\"比如为某篇文章添加评论\",{\"1\":{\"73\":1}}],[\"比如html就是一个常见的超文本\",{\"1\":{\"73\":1}}],[\"比如http超文本传输协议\",{\"1\":{\"72\":1}}],[\"比如手机上的软件都是在应用层实现的\",{\"1\":{\"72\":1}}],[\"比如缓存雪崩\",{\"1\":{\"64\":1}}],[\"比如master分支上在b节点后新开发了m\",{\"1\":{\"62\":1}}],[\"比如说feature是master节点b处拉出来的一条新分支\",{\"1\":{\"62\":1}}],[\"比如a账户和b账户原来余额都是200元\",{\"1\":{\"48\":1}}],[\"比如经典的转账案例\",{\"1\":{\"47\":1}}],[\"明明a账户扣除了100元\",{\"1\":{\"47\":1}}],[\"而对于静态代理\",{\"1\":{\"86\":1}}],[\"而这个注解如何工作的具体逻辑\",{\"1\":{\"82\":1}}],[\"而具体的业务逻辑相当于一个\",{\"1\":{\"81\":1}}],[\"而后端又有很多接口需要进行权限判断\",{\"1\":{\"80\":1}}],[\"而数据库没有对应的资源\",{\"1\":{\"67\":1}}],[\"而数据库中也没有数据\",{\"1\":{\"67\":1}}],[\"而此时缓存中没有数据\",{\"1\":{\"67\":1}}],[\"而此时热点数据缓存过期\",{\"1\":{\"65\":1}}],[\"而服务端并不会主动向客户端推送资源\",{\"1\":{\"55\":1}}],[\"而不会请求数据库\",{\"1\":{\"68\":1}}],[\"而不会相互干扰\",{\"1\":{\"49\":1}}],[\"而不能\",{\"1\":{\"47\":1}}],[\"而另一半没有执行的情况\",{\"1\":{\"47\":1}}],[\"回到操作1之前的状态\",{\"1\":{\"47\":1}}],[\"回头看看路\",{\"1\":{\"0\":1}}],[\"整个事务应该回滚\",{\"1\":{\"47\":1}}],[\"操作2没有发生\",{\"1\":{\"47\":1}}],[\"操作2应该是b的账户增加100元\",{\"1\":{\"47\":1}}],[\"操作1是a的账户扣除100元\",{\"1\":{\"47\":1}}],[\"不要忘记移动指针\",{\"1\":{\"124\":1}}],[\"不要忘了16岁自己的梦想\",{\"1\":{\"0\":1}}],[\"不难写出以下代码\",{\"1\":{\"120\":1}}],[\"不到黄河不回头\",{\"1\":{\"120\":1}}],[\"不一定经过根节点\",{\"1\":{\"113\":1}}],[\"不含重复字符和最长子串\",{\"1\":{\"104\":1}}],[\"不能被修改\",{\"1\":{\"99\":1}}],[\"不断put元素进去\",{\"1\":{\"95\":1}}],[\"不用写大量重复性的代码\",{\"1\":{\"81\":1}}],[\"不给热点数据设置过期时间\",{\"1\":{\"66\":1}}],[\"不可以\",{\"1\":{\"59\":1}}],[\"不会出现只执行一半\",{\"1\":{\"47\":1}}],[\"隔离性\",{\"0\":{\"49\":1},\"1\":{\"46\":1}}],[\"一旦遍历到一个\",{\"1\":{\"120\":1}}],[\"一开始\",{\"1\":{\"109\":1}}],[\"一是能存储的元素更多了\",{\"1\":{\"95\":1}}],[\"一是全双工通信\",{\"1\":{\"56\":1}}],[\"一种是cglib的动态代理\",{\"1\":{\"86\":1}}],[\"一种是jdk的动态代理\",{\"1\":{\"86\":1}}],[\"一\",{\"0\":{\"83\":1},\"1\":{\"68\":1}}],[\"一共是400元\",{\"1\":{\"48\":1}}],[\"一致性\",{\"0\":{\"48\":1}}],[\"一致性是最终达成的目的\",{\"1\":{\"46\":1}}],[\"一个cur指针从head开始往后遍历原链表\",{\"1\":{\"109\":1}}],[\"一个pre指针指向head的前一位\",{\"1\":{\"109\":1}}],[\"一个类实现某个接口也就拥有了对应的行为\",{\"1\":{\"99\":1}}],[\"一个类只能继承一个抽象类\",{\"1\":{\"99\":1}}],[\"一个元素占一个索引\",{\"1\":{\"95\":1}}],[\"一个feature分支\",{\"1\":{\"62\":1}}],[\"一个master分支\",{\"1\":{\"62\":1}}],[\"一个事务执行完毕后\",{\"1\":{\"50\":1}}],[\"一个事务执行前后\",{\"1\":{\"48\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"47\":1}}],[\"一个拥有\",{\"1\":{\"21\":1}}],[\"事务有四大特性\",{\"1\":{\"46\":1}}],[\"事务的acid\",{\"0\":{\"46\":1}}],[\"此外\",{\"1\":{\"119\":1}}],[\"此时null<\",{\"1\":{\"109\":1}}],[\"此时pre值指向链表的最后一个节点\",{\"1\":{\"109\":1}}],[\"此时是a\",{\"1\":{\"62\":1}}],[\"此页面应当包含\",{\"1\":{\"43\":1}}],[\"此文字有脚注\",{\"1\":{\"22\":1}}],[\"徽章\",{\"1\":{\"42\":1}}],[\"徽章文字\",{\"1\":{\"42\":1}}],[\"pre移动到cur的位置\",{\"1\":{\"109\":1}}],[\"pre\",{\"1\":{\"109\":4}}],[\"pre向后遍历\",{\"1\":{\"109\":1}}],[\"pre指针指向null值\",{\"1\":{\"109\":1}}],[\"pre即可\",{\"1\":{\"109\":1}}],[\"private\",{\"1\":{\"84\":2,\"115\":1,\"120\":1}}],[\"posts\",{\"0\":{\"127\":1}}],[\"postmapping\",{\"1\":{\"85\":1}}],[\"post请求代表添加某个资源\",{\"1\":{\"73\":1}}],[\"pointcut\",{\"1\":{\"84\":2}}],[\"pull\",{\"1\":{\"62\":2}}],[\"public\",{\"1\":{\"42\":1,\"83\":1,\"84\":3,\"85\":1,\"104\":1,\"109\":1,\"115\":1,\"120\":1,\"124\":1}}],[\"plugin\",{\"1\":{\"16\":1}}],[\"但是cur再向后遍历时候\",{\"1\":{\"109\":1}}],[\"但是这个过程中有个问题\",{\"1\":{\"109\":1}}],[\"但是这是在我们一开始\",{\"1\":{\"89\":1}}],[\"但是能实现多个接口\",{\"1\":{\"99\":1}}],[\"但是浏览器的本身会进行限制\",{\"1\":{\"73\":1}}],[\"但是如果判断存在\",{\"1\":{\"68\":1}}],[\"但是如果操作1结束后的瞬间\",{\"1\":{\"47\":1}}],[\"但是可能有精度问题\",{\"1\":{\"68\":1}}],[\"但是使用缓存又会产生一些问题\",{\"1\":{\"64\":1}}],[\"但是易于拓展\",{\"1\":{\"56\":1}}],[\"但是并不是说websocket协议就一定优于http协议\",{\"1\":{\"56\":1}}],[\"但是\",{\"1\":{\"55\":1}}],[\"但是b账户没有增加\",{\"1\":{\"47\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"42\":1}}],[\"但是还是想要把我的故事记录下来\",{\"1\":{\"0\":1}}],[\"标签里包含了一些超链接\",{\"1\":{\"73\":1}}],[\"标签为\",{\"1\":{\"41\":1}}],[\"标题和页面信息\",{\"1\":{\"43\":1}}],[\"标记\",{\"0\":{\"23\":1}}],[\"日\",{\"1\":{\"41\":1}}],[\"月\",{\"1\":{\"41\":1}}],[\"年\",{\"1\":{\"41\":1}}],[\"写作日期为\",{\"1\":{\"41\":1}}],[\"↩︎\",{\"1\":{\"37\":1}}],[\"幻灯片\",{\"0\":{\"37\":1}}],[\"幻灯片页\",{\"0\":{\"1\":1}}],[\"交互演示\",{\"0\":{\"35\":1,\"36\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"34\":1}}],[\"向右搜索\",{\"1\":{\"120\":1}}],[\"向\",{\"1\":{\"34\":1}}],[\"样式化\",{\"0\":{\"34\":1}}],[\"导入文件\",{\"0\":{\"32\":1}}],[\"导航栏\",{\"1\":{\"5\":1,\"43\":1}}],[\"−1\",{\"1\":{\"31\":1}}],[\"root\",{\"1\":{\"115\":10}}],[\"role\",{\"1\":{\"85\":1}}],[\"rightsize\",{\"1\":{\"115\":3}}],[\"right\",{\"1\":{\"115\":7}}],[\"runtime\",{\"1\":{\"83\":1}}],[\"reverse\",{\"1\":{\"109\":1,\"124\":1}}],[\"res++\",{\"1\":{\"120\":1}}],[\"res\",{\"1\":{\"104\":4,\"120\":2,\"124\":4}}],[\"return\",{\"1\":{\"85\":1,\"104\":1,\"109\":2,\"115\":4,\"120\":2,\"124\":1}}],[\"retentionpolicy\",{\"1\":{\"83\":1}}],[\"retention\",{\"1\":{\"83\":2}}],[\"requestbody\",{\"1\":{\"85\":1}}],[\"redis\",{\"2\":{\"69\":1}}],[\"rebase\",{\"1\":{\"62\":2}}],[\"r−i​\",{\"1\":{\"31\":1}}],[\"r−i+1\",{\"1\":{\"31\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"31\":1}}],[\"rgba\",{\"1\":{\"26\":1}}],[\"ωyω​\",{\"1\":{\"31\":2}}],[\"∂ωr∂r​\",{\"1\":{\"31\":1}}],[\"流程图\",{\"0\":{\"29\":1}}],[\"exception\",{\"1\":{\"85\":1}}],[\"elementtype\",{\"1\":{\"83\":1}}],[\"echarts\",{\"0\":{\"28\":1}}],[\"enhance\",{\"1\":{\"16\":1}}],[\"图片\",{\"1\":{\"73\":1}}],[\"图片增强\",{\"0\":{\"25\":1}}],[\"图表\",{\"0\":{\"27\":1}}],[\"0\",{\"1\":{\"26\":1,\"59\":2,\"104\":3,\"115\":5,\"119\":12,\"120\":10,\"124\":9}}],[\"leetcode\",{\"0\":{\"129\":1}}],[\"leftsize\",{\"1\":{\"115\":3}}],[\"left\",{\"1\":{\"115\":7}}],[\"length\",{\"1\":{\"104\":1,\"120\":4,\"124\":2}}],[\"last\",{\"1\":{\"104\":4}}],[\"lv0\",{\"1\":{\"85\":1}}],[\"long\",{\"1\":{\"59\":4}}],[\"logy\",{\"1\":{\"31\":2}}],[\"logo\",{\"1\":{\"26\":2}}],[\"listnode\",{\"1\":{\"109\":11}}],[\"limitedrolecodelist\",{\"1\":{\"83\":1,\"85\":1}}],[\"link\",{\"1\":{\"26\":1}}],[\"light\",{\"1\":{\"26\":1}}],[\"tostring\",{\"1\":{\"124\":1}}],[\"toc\",{\"1\":{\"43\":1}}],[\"treenode\",{\"1\":{\"115\":10}}],[\"this\",{\"1\":{\"109\":3,\"115\":4}}],[\"throws\",{\"1\":{\"85\":1}}],[\"there\",{\"1\":{\"26\":2}}],[\"target\",{\"1\":{\"83\":2}}],[\"temp\",{\"1\":{\"109\":2,\"124\":3}}],[\"telnet远程登陆协议等\",{\"1\":{\"72\":1}}],[\"tex\",{\"0\":{\"31\":1}}],[\"tcp\",{\"0\":{\"71\":1},\"1\":{\"71\":1}}],[\"tcp四次挥手释放连接\",{\"1\":{\"55\":2}}],[\"tcp三次握手建立连接\",{\"1\":{\"55\":2}}],[\"title\",{\"1\":{\"26\":1}}],[\"head\",{\"1\":{\"108\":1,\"109\":3}}],[\"hashmap\",{\"2\":{\"97\":1}}],[\"hashmap的resize\",{\"1\":{\"96\":1}}],[\"hashmap的底层是用数组实现的\",{\"1\":{\"95\":1}}],[\"hashmap的底层存储\",{\"0\":{\"95\":1}}],[\"hashmap的扩容是怎么实现的\",{\"0\":{\"94\":1}}],[\"houbingzhi\",{\"1\":{\"84\":1,\"91\":1}}],[\"hope\",{\"1\":{\"26\":4,\"34\":1,\"41\":1}}],[\"http还有一个post请求\",{\"1\":{\"73\":1}}],[\"http本身是不会对url的长度进行限制\",{\"1\":{\"73\":1}}],[\"http协议协议虽然多了个请求头header\",{\"1\":{\"56\":1}}],[\"http协议是短连接\",{\"1\":{\"55\":1}}],[\"https\",{\"1\":{\"26\":2}}],[\"h2o\",{\"1\":{\"19\":1}}],[\"卡片\",{\"0\":{\"26\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"25\":1}}],[\"任务列表\",{\"0\":{\"24\":1}}],[\"脚注\",{\"0\":{\"22\":1}}],[\"单词\",{\"1\":{\"21\":1}}],[\"的长度\",{\"1\":{\"103\":1,\"113\":1}}],[\"的情况\",{\"1\":{\"47\":1}}],[\"的\",{\"1\":{\"21\":1,\"41\":1}}],[\"i+1\",{\"1\":{\"120\":1}}],[\"i++\",{\"1\":{\"104\":1,\"120\":1}}],[\"if\",{\"1\":{\"109\":1,\"115\":2,\"120\":2,\"124\":1}}],[\"i\",{\"1\":{\"104\":5,\"120\":12,\"124\":5}}],[\"index\",{\"1\":{\"104\":3}}],[\"int\",{\"1\":{\"104\":7,\"109\":3,\"115\":8,\"120\":6,\"124\":6}}],[\"interface\",{\"1\":{\"83\":1,\"99\":1}}],[\"invoke\",{\"1\":{\"91\":2}}],[\"ip四层模型是计算机网络实际应用的模型\",{\"1\":{\"71\":1}}],[\"ip四层模型\",{\"0\":{\"71\":1}}],[\"ir⋯\",{\"1\":{\"31\":1}}],[\"is\",{\"1\":{\"26\":2}}],[\"id\",{\"1\":{\"21\":1}}],[\"it\",{\"1\":{\"14\":2}}],[\"我是怎么用spring\",{\"0\":{\"79\":1}}],[\"我是居中的\",{\"1\":{\"20\":1}}],[\"我们要在二维矩阵中找到第一个\",{\"1\":{\"120\":1}}],[\"我们来模拟一下\",{\"1\":{\"109\":1}}],[\"我们注意到\",{\"1\":{\"109\":1}}],[\"我们在业务开发中\",{\"1\":{\"89\":1}}],[\"我们在调用每一个接口的时候\",{\"1\":{\"81\":1}}],[\"我们最前面定义注解的时候\",{\"1\":{\"86\":1}}],[\"我们想对角色权限进行控制\",{\"1\":{\"83\":1}}],[\"我们希望最后的实现效果\",{\"1\":{\"82\":1}}],[\"我们抽出来不是关键业务的同一类方法\",{\"1\":{\"81\":1}}],[\"我们编写业务代码的时候\",{\"1\":{\"81\":1}}],[\"我们分层就是为了让每一层简单\",{\"1\":{\"75\":1}}],[\"我们看见的页面就是既包含文本\",{\"1\":{\"73\":1}}],[\"我们看到的网页\",{\"1\":{\"73\":1}}],[\"我们可以模拟一下两数相加的过程\",{\"1\":{\"124\":1}}],[\"我们可以定义个temp来临时保存cur的下一个指针即可\",{\"1\":{\"109\":1}}],[\"我们可以使用spring\",{\"1\":{\"81\":1}}],[\"我们可以针对请求\",{\"1\":{\"68\":1}}],[\"我们可以在接口层面\",{\"1\":{\"68\":1}}],[\"我们没有采用http协议\",{\"1\":{\"55\":1}}],[\"我在右对齐\",{\"1\":{\"20\":1}}],[\"我为什么选择了计算机\",{\"1\":{\"0\":1}}],[\"上一个节点的左右路径大小怎么保存下来\",{\"1\":{\"114\":1}}],[\"上一篇\",{\"1\":{\"5\":1}}],[\"上下角标\",{\"0\":{\"19\":1}}],[\"详情容器\",{\"1\":{\"17\":1}}],[\"危险容器\",{\"1\":{\"17\":1}}],[\"警告容器\",{\"1\":{\"17\":1}}],[\"==\",{\"1\":{\"109\":1,\"115\":5,\"120\":2,\"124\":1}}],[\"=\",{\"1\":{\"17\":1,\"31\":1,\"59\":6,\"85\":1,\"89\":1,\"91\":5,\"104\":8,\"108\":1,\"109\":10,\"115\":8,\"119\":1,\"120\":4,\"123\":2,\"124\":8}}],[\"append\",{\"1\":{\"124\":2}}],[\"api\",{\"0\":{\"91\":1}}],[\"apilimitedroleaspect\",{\"1\":{\"84\":1}}],[\"apilimitedrole\",{\"1\":{\"83\":1,\"84\":4,\"85\":1}}],[\"arrays\",{\"1\":{\"104\":1}}],[\"ababc\",{\"1\":{\"103\":1,\"104\":1}}],[\"abc\",{\"1\":{\"103\":1,\"104\":1}}],[\"about\",{\"0\":{\"0\":1}}],[\"aop使用的是两种动态代理\",{\"1\":{\"86\":1}}],[\"aop的jdk动态代理中\",{\"1\":{\"90\":1}}],[\"aop的实现原理\",{\"0\":{\"86\":1}}],[\"aop的技术来实现\",{\"1\":{\"81\":1}}],[\"aop的\",{\"0\":{\"79\":1}}],[\"addusermoments\",{\"1\":{\"85\":1}}],[\"authroleconstant\",{\"1\":{\"85\":1}}],[\"autowired\",{\"1\":{\"84\":2}}],[\"annotation\",{\"1\":{\"84\":3}}],[\"aspect\",{\"1\":{\"84\":1}}],[\"aspect实现\",{\"1\":{\"81\":1}}],[\"a账户应该是100元\",{\"1\":{\"48\":1}}],[\"a向b转账100元\",{\"1\":{\"47\":1}}],[\"attrs\",{\"0\":{\"21\":1}}],[\"a\",{\"1\":{\"17\":1,\"59\":4}}],[\"与\",{\"1\":{\"17\":1}}],[\"包含\",{\"1\":{\"17\":1}}],[\"信息容器\",{\"1\":{\"17\":1}}],[\"val\",{\"1\":{\"109\":7,\"115\":7}}],[\"variable\",{\"1\":{\"17\":1}}],[\"void\",{\"1\":{\"84\":2,\"120\":1}}],[\"vue\",{\"0\":{\"36\":1}}],[\"vuepress\",{\"0\":{\"15\":1},\"1\":{\"11\":2,\"13\":2,\"14\":1,\"15\":2,\"16\":1,\"42\":1}}],[\"安全的在\",{\"1\":{\"17\":1}}],[\"提供了数据链路级别的功能\",{\"1\":{\"76\":1}}],[\"提供网络支持\",{\"1\":{\"74\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"16\":1}}],[\"提交后文本会写到报文body中\",{\"1\":{\"73\":1}}],[\"提前通知后台线程更新缓存以及重新设置更新时间\",{\"1\":{\"66\":1}}],[\"提示\",{\"1\":{\"42\":1}}],[\"提示容器\",{\"1\":{\"17\":1}}],[\"提醒自己\",{\"1\":{\"0\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"42\":1}}],[\"主题扩展了更多\",{\"1\":{\"16\":1}}],[\"主题扩展\",{\"0\":{\"16\":1}}],[\"主要从\",{\"1\":{\"11\":1}}],[\"主要功能与配置演示\",{\"0\":{\"2\":1}}],[\"中设置页面信息\",{\"1\":{\"41\":1}}],[\"中使用\",{\"1\":{\"17\":1}}],[\"中的\",{\"1\":{\"15\":1}}],[\"中很重要的一个概念\",{\"1\":{\"13\":1}}],[\"请你计算网格中的岛屿数量\",{\"1\":{\"119\":1}}],[\"请你找出其中不含有重复字符的\",{\"1\":{\"103\":1}}],[\"请使用绝对链接\",{\"1\":{\"42\":1}}],[\"请阅读\",{\"1\":{\"15\":1}}],[\"请先阅读\",{\"1\":{\"12\":1}}],[\"关于这些扩展\",{\"1\":{\"15\":1}}],[\"语法\",{\"0\":{\"31\":1},\"1\":{\"16\":1}}],[\"语法进行了扩展\",{\"1\":{\"15\":1}}],[\"语法扩展\",{\"1\":{\"14\":1}}],[\"对数据库的影响应该是永久的\",{\"1\":{\"50\":1}}],[\"对于一些非法的请求进行拦截判断\",{\"1\":{\"68\":1}}],[\"对于用户经常访问的数据\",{\"1\":{\"64\":1}}],[\"对于弹幕模块\",{\"1\":{\"56\":1}}],[\"对于获取弹幕功能\",{\"1\":{\"55\":1}}],[\"对于\",{\"1\":{\"42\":1}}],[\"对\",{\"1\":{\"15\":1}}],[\"为了便于区分\",{\"1\":{\"109\":1}}],[\"为了丰富文档写作\",{\"1\":{\"15\":1}}],[\"为一个类设置属性\",{\"1\":{\"89\":1}}],[\"为什么不用http协议\",{\"0\":{\"55\":1}}],[\"为什么用websocket协议而不是http\",{\"0\":{\"53\":1}}],[\"为每个\",{\"1\":{\"13\":1}}],[\"插件来实现\",{\"1\":{\"14\":1}}],[\"内容\",{\"1\":{\"14\":1}}],[\"来解析\",{\"1\":{\"14\":1}}],[\"是继承实现的\",{\"1\":{\"86\":1}}],[\"是在controller层的接口直接加上一个注解\",{\"1\":{\"82\":1}}],[\"是需要根据具体业务场景来判断的\",{\"1\":{\"56\":1}}],[\"是\",{\"1\":{\"13\":1}}],[\"相关信息\",{\"1\":{\"13\":1}}],[\"配置\",{\"0\":{\"13\":1}}],[\"演示\",{\"1\":{\"12\":1}}],[\"和num2\",{\"1\":{\"123\":1}}],[\"和\",{\"1\":{\"12\":1,\"41\":1,\"119\":1}}],[\"介绍\",{\"0\":{\"12\":1},\"1\":{\"12\":1,\"13\":1}}],[\"你不能使用任何內建的用于处理大整数的库\",{\"1\":{\"123\":1}}],[\"你那有没有资源\",{\"1\":{\"55\":1}}],[\"你需要阅读\",{\"1\":{\"13\":1}}],[\"你应该创建和编写\",{\"1\":{\"11\":1}}],[\"你可以假设该网格的四条边均被水包围\",{\"1\":{\"119\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"43\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"5\":1}}],[\"你可以将图片和\",{\"1\":{\"42\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"42\":1}}],[\"你可以在\",{\"1\":{\"41\":1}}],[\"你可以标记\",{\"1\":{\"23\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"11\":1}}],[\"文章标题列表\",{\"1\":{\"43\":1}}],[\"文章加密\",{\"2\":{\"10\":1}}],[\"文件夹的图片\",{\"1\":{\"42\":1}}],[\"文件放置在一起\",{\"1\":{\"42\":1}}],[\"文件\",{\"1\":{\"11\":1}}],[\"文件生成页面\",{\"1\":{\"11\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"42\":1}}],[\"文字\",{\"1\":{\"8\":2}}],[\"文字段落\",{\"1\":{\"8\":24}}],[\"2<\",{\"1\":{\"109\":2}}],[\"2020\",{\"1\":{\"41\":1}}],[\"230\",{\"1\":{\"26\":1}}],[\"253\",{\"1\":{\"26\":1}}],[\"2\",{\"0\":{\"107\":1},\"1\":{\"8\":14,\"24\":1,\"108\":2,\"109\":1,\"113\":3}}],[\"10\",{\"1\":{\"124\":2}}],[\"134\",{\"1\":{\"123\":1}}],[\"138\",{\"1\":{\"26\":1}}],[\"123\",{\"1\":{\"123\":1}}],[\"128\",{\"1\":{\"104\":1}}],[\"11\",{\"1\":{\"123\":1}}],[\"1<\",{\"1\":{\"109\":2}}],[\"15\",{\"1\":{\"26\":1}}],[\"19th\",{\"1\":{\"19\":1}}],[\"1\",{\"0\":{\"102\":1},\"1\":{\"8\":12,\"17\":1,\"22\":1,\"24\":1,\"41\":2,\"59\":4,\"84\":1,\"95\":1,\"104\":4,\"108\":2,\"109\":2,\"113\":3,\"115\":2,\"119\":11,\"120\":12,\"124\":3}}],[\"段落\",{\"1\":{\"8\":2}}],[\"密码加密的文章\",{\"0\":{\"8\":1}}],[\"页脚\",{\"1\":{\"5\":1,\"43\":1}}],[\"页面结构\",{\"0\":{\"43\":1}}],[\"页面内容\",{\"0\":{\"42\":1}}],[\"页面配置\",{\"0\":{\"40\":1},\"1\":{\"41\":1},\"2\":{\"45\":1}}],[\"页面引入配置\",{\"1\":{\"13\":1}}],[\"页面信息\",{\"0\":{\"41\":1},\"1\":{\"5\":1}}],[\"页面展示\",{\"1\":{\"3\":1,\"32\":1}}],[\"评论\",{\"1\":{\"5\":1,\"43\":1}}],[\"贡献者\",{\"1\":{\"5\":1,\"43\":1}}],[\"路径导航\",{\"1\":{\"5\":1,\"43\":1}}],[\"侧边栏\",{\"1\":{\"5\":1,\"43\":1}}],[\"禁用\",{\"2\":{\"7\":1}}],[\"禁用了如下功能\",{\"1\":{\"5\":1}}],[\"禁用展示\",{\"1\":{\"3\":1,\"32\":1}}],[\"fill\",{\"1\":{\"104\":1}}],[\"findones\",{\"1\":{\"120\":1}}],[\"findmaxsize\",{\"1\":{\"115\":1}}],[\"findlongest\",{\"1\":{\"104\":1}}],[\"final类型的\",{\"1\":{\"99\":1}}],[\"for\",{\"1\":{\"104\":1,\"120\":2}}],[\"forname\",{\"1\":{\"91\":2}}],[\"forever\",{\"1\":{\"0\":1}}],[\"feifei\",{\"1\":{\"89\":1,\"91\":1}}],[\"feature是待变基分支\",{\"1\":{\"62\":1}}],[\"feature是从master的某个节点处分离出来的一条分支\",{\"1\":{\"62\":1}}],[\"ftp文件传输协议\",{\"1\":{\"72\":1}}],[\"frontmatter\",{\"1\":{\"5\":1,\"13\":3,\"41\":1,\"43\":1}}],[\"展示\",{\"0\":{\"11\":1},\"1\":{\"3\":1,\"32\":1}}],[\"m\",{\"1\":{\"124\":2}}],[\"mybatis框架\",{\"1\":{\"90\":1}}],[\"moments\",{\"1\":{\"85\":1}}],[\"more\",{\"1\":{\"40\":1}}],[\"max\",{\"1\":{\"104\":2,\"115\":6}}],[\"math\",{\"1\":{\"104\":2,\"115\":2}}],[\"master是基分支\",{\"1\":{\"62\":1}}],[\"markdown\",{\"0\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1},\"1\":{\"3\":1,\"11\":2,\"12\":3,\"13\":1,\"14\":3,\"15\":2,\"16\":1,\"17\":1,\"32\":1,\"41\":1,\"42\":2},\"2\":{\"39\":1}}],[\"ms\",{\"1\":{\"41\":1}}],[\"mister\",{\"1\":{\"26\":2}}],[\"mr\",{\"1\":{\"26\":1,\"34\":1}}],[\"md\",{\"1\":{\"16\":1}}],[\"method\",{\"1\":{\"83\":1,\"91\":2}}],[\"mermaid\",{\"0\":{\"30\":1}}],[\"me\",{\"0\":{\"0\":1}}],[\"young\",{\"1\":{\"0\":1}}],[\"也应用了method的api\",{\"1\":{\"90\":1}}],[\"也就没法直接new一个对象来调用构造方法了\",{\"1\":{\"89\":1}}],[\"也就不会到达数据库了\",{\"1\":{\"68\":1}}],[\"也就是无next指针\",{\"1\":{\"109\":1}}],[\"也就是应用层\",{\"1\":{\"74\":1}}],[\"也就是传输的报文体积更小\",{\"1\":{\"56\":1}}],[\"也就是不用频繁请求\",{\"1\":{\"56\":1}}],[\"也就是不但客户端能向服务端请求资源\",{\"1\":{\"56\":1}}],[\"也就是说\",{\"1\":{\"55\":1}}],[\"也不能直接将输入的字符串转换为整数形式\",{\"1\":{\"123\":1}}],[\"也不应该丢失数据\",{\"1\":{\"50\":1}}],[\"也不要忘了关注自己的内心\",{\"1\":{\"0\":1}}],[\"也是参与火星以及未来太空探险旅行的一种方式\",{\"1\":{\"0\":1}}],[\"把自己姓名发送到火星上\",{\"1\":{\"0\":1}}],[\"表示切点的应用范围\",{\"1\":{\"84\":1}}],[\"表示会被spring进行管理\",{\"1\":{\"83\":1}}],[\"表示这个注解会被加到doc文档上\",{\"1\":{\"83\":1}}],[\"表示这个注解要加在方法上\",{\"1\":{\"83\":1}}],[\"表示运行期间一直存在\",{\"1\":{\"83\":1}}],[\"表示\",{\"1\":{\"0\":1}}],[\"星球科学总监\",{\"1\":{\"0\":1}}],[\"博学而笃志\",{\"1\":{\"0\":1}}],[\"虚心请教的同时\",{\"1\":{\"0\":1}}],[\"继续向前走\",{\"1\":{\"0\":1}}],[\"吃了很多的苦\",{\"1\":{\"0\":1}}],[\"谈不上走了很多的路\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
