import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-c5438559.js";const e={},o=t(`<h1 id="掌握java反射" tabindex="-1"><a class="header-anchor" href="#掌握java反射" aria-hidden="true">#</a> 掌握Java反射</h1><p>我们在业务开发中，为一个类设置属性，最常见的是这样的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Feifei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，初始化一个类之前我们已经知道这是一个什么类了，直接调用构造方法类即可。</p><p>但是这是在我们一开始，就知道这是一个什么样的类的前提下，如果我们<strong>不知道这是一个什么样的类，也就没法直接<code>new</code>一个对象来调用构造方法了</strong>。这其实就是<strong>反射</strong>的特点。</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>通过反射，能够在<strong>运行时分析类</strong>以及<strong>执行类中方法</strong>，可以获取一个类中所有的属性和方法，还可以调用这些属性和方法。</p><p>应用场景比如Spring、Mybatis框架，底层原理都大量应用了反射机制。Spring AOP的JDK动态代理中，也应用了Method的API。</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Class.forName 通过类的包名获取反射类</span>
<span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.houbingzhi.s39.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过Class对象获取构造方法Construct对象</span>
<span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过Construct对象初始化反射类对象</span>
<span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取要调用的方法的Method对象</span>
<span class="token class-name">Method</span> setNameMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;setName&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> getNameMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过invoke方法执行</span>
setNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token string">&quot;Feifei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
getNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","2.html.vue"]]);export{d as default};
