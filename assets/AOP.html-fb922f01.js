import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-881aed10.js";const t={},p=e(`<h1 id="我是怎么用spring-aop的" tabindex="-1"><a class="header-anchor" href="#我是怎么用spring-aop的" aria-hidden="true">#</a> 我是怎么用Spring AOP的？</h1><h2 id="业务需求" tabindex="-1"><a class="header-anchor" href="#业务需求" aria-hidden="true">#</a> 业务需求</h2><p>项目中需要对前端的元素、接口进行权限控制，如果权限不足，无法访问。而后端又有很多接口需要进行权限判断，每个接口都进行判断，会有很多重复性的代码，可维护性不高。</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>所以我们需要把这些公共的代码抽出来，我们编写业务代码的时候，只需要关注具体不同的逻辑即可，不用写大量重复性的代码。而具体的业务逻辑相当于一个&quot;织入&quot;进去的操作。</p><p>在这个过程中，我们抽出来不是关键业务的同一类方法，并且封装成一个类用来判断权限。</p><p><strong>Spring AOP</strong>就是在某些方法前后执行一些通用的操作，而这些操作又不会影响程序本身的正常执行，比如日志操作、权限判断。</p><p>我们可以使用Spring AOP的技术来实现，在AOP中，这个封装成的类，叫切面，可以用@Aspect实现。我们在调用每一个接口的时候，都需要先判断权限，所以给切面中具体的类加上@Before注解，代表在目标方法调用之前执行。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><p>我们希望最后的实现效果，是在Controller层的接口直接加上一个注解，就能实现权限判断，这个注解是我们自定义的，而这个注解如何工作的具体逻辑，需要在切面里写。</p><h3 id="一、声明注解" tabindex="-1"><a class="header-anchor" href="#一、声明注解" aria-hidden="true">#</a> 一、声明注解</h3><p>我们想对角色权限进行控制，第一步就是先定义自己的注解，确定这个注解的位置后，切面才能工作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * @Retention 代表生命周期，这里是RUNTIME，表示运行期间一直存在
 * @Target 表示这个注解要加在方法上
 * @Document 表示这个注解会被加到Doc文档上
 * @Component 表示会被Spring进行管理，后面进行依赖注入
 */</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ApiLimitedRole</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">limitedRoleCodeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、定义切面。" tabindex="-1"><a class="header-anchor" href="#二、定义切面。" aria-hidden="true">#</a> 二、定义切面。</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiLimitedRoleAspect</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserSupport</span> userSupport<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRoleService</span> userRoleService<span class="token punctuation">;</span>

    <span class="token comment">// @Pointcut 表示切点的应用范围</span>
    <span class="token comment">// 这里指发挥作用的注解具体是哪一个</span>
    <span class="token comment">// 即使check为空，也仍要写切点，因为不写切点，程序就无法被AOP代理，不知道应用范围</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.houbingzhi.bilibili.domain.annotation.ApiLimitedRole)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// 在调用Controller层时的接口时，会先进行下面这些权限判断</span>
    <span class="token comment">// 再进行具体的业务逻辑</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;check() &amp;&amp; @annotation(apiLimitedRole)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">ApiLimitedRole</span> apiLimitedRole<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 通用的判断权限的业务逻辑</span>
      <span class="token comment">// ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、应用注解" tabindex="-1"><a class="header-anchor" href="#三、应用注解" aria-hidden="true">#</a> 三、应用注解</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiLimitedRole</span><span class="token punctuation">(</span>limitedRoleCodeList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AuthRoleConstant</span><span class="token punctuation">.</span><span class="token constant">ROLE_LV0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DataLimited</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user-moments&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">JsonResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">addUserMoments</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserMoment</span> userMoment<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token comment">// 具体的业务逻辑</span>
  <span class="token comment">// ......</span>
  <span class="token keyword">return</span> <span class="token class-name">JsonResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-aop的实现原理" tabindex="-1"><a class="header-anchor" href="#spring-aop的实现原理" aria-hidden="true">#</a> Spring AOP的实现原理</h2><p>Spring这个优秀的框架中，有很多设计模式的体现，比如单例模式，再比如AOP机制也应用了代理模式。</p><p>那么是如何应用代理模式的呢？</p><p>我们最前面定义注解的时候，在注解最上面用了一个@Component让Spring进行管理，这个我们自己定义的注解就成了Spring管理的一个Bean对象，然后我们为这个对象配置了一个切面。那么Spring在创建这个Bean的时候，实际上<strong>创建的是这个Bean的代理对象</strong>，后续对Bean中方法的调用，实际上是<strong>代理类重写的代理方法</strong>。</p><p>AOP使用的是两种动态代理，一种是JDK的动态代理，一种是CGLib的动态代理。</p><p>那么什么是动态代理？什么是静态代理？</p><p>动态代理比静态代理更加灵活，动态代理只需要实现接口即可，而对于静态代理，如果接口中的方法变了，目标对象和代理对象都要进行修改。</p><p>再说这两种动态代理方法有什么区别？</p><p>如果被代理的类有实现的接口，那就是JDK代理类；如果没有实现接口，是继承实现的，那就是CGLib动态代理类。</p>`,26),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","AOP.html.vue"]]);export{r as default};
