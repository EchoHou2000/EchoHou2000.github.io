import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as h,c as e,a as s}from"./app-c7c7874c.js";const r={},t=s('<h1 id="hashmap的扩容是怎么实现的" tabindex="-1"><a class="header-anchor" href="#hashmap的扩容是怎么实现的" aria-hidden="true">#</a> HashMap的扩容是怎么实现的</h1><h2 id="hashmap的底层存储" tabindex="-1"><a class="header-anchor" href="#hashmap的底层存储" aria-hidden="true">#</a> HashMap的底层存储</h2><p>HashMap的底层是用数组实现的，当需要存储元素的时候，不断put元素进去，达到一定容量后会扩容，一是能存储的元素更多了，二是因为位置多了，查询效率也会更快，之前可能多个元素会通过<strong>拉链法</strong>放在同一个索引上，查询的时候还需要遍历链表，时间复杂度O(n)，如果位置多了，一个元素占一个索引，查找的时间复杂度就是O(1)。</p><h2 id="扩容机制" tabindex="-1"><a class="header-anchor" href="#扩容机制" aria-hidden="true">#</a> 扩容机制</h2><p>数组是无法自动进行扩容的，HashMap的<code>resize()</code>方法会声明一个更大容量的数组，将之前旧的小容量数组中的元素复制过去，并且重新计算hash值，计算hash值是为了将元素分布得更均匀，减少hash碰撞，这个计算hash值的过程是比较耗时的。</p>',5),o=[t];function n(c,d){return h(),e("div",null,o)}const _=a(r,[["render",n],["__file","hashmap-kuorong.html.vue"]]);export{_ as default};
