import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,a as h}from"./app-496ff2bf.js";const d={},t=h('<h1 id="事务的acid" tabindex="-1"><a class="header-anchor" href="#事务的acid" aria-hidden="true">#</a> 事务的ACID</h1><p>事务有四大特性。一致性是最终达成的目的，原子性、隔离性、持久性是手段。</p><h2 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性" aria-hidden="true">#</a> 原子性</h2><p>一个事务中的所有操作，要么全部发生，要么全部不发生，不会出现只执行一半，而另一半没有执行的情况。</p><p>比如经典的转账案例，A向B转账100元，操作1是A的账户扣除100元，操作2应该是B的账户增加100元。但是如果操作1结束后的瞬间，数据库宕机，操作2没有发生，整个事务应该回滚，回到操作1之前的状态，就像任何操作没有进行的样子，而不能&quot;明明A账户扣除了100元，但是B账户没有增加&quot;的情况。</p><h2 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性" aria-hidden="true">#</a> 一致性</h2><p>一个事务执行前后，数据库应该保持一致性的状态，比如A账户和B账户原来余额都是200元，一共是400元，转账之后，A账户应该是100元，B账户应该是300元，加起来还是400元。</p><h2 id="隔离性" tabindex="-1"><a class="header-anchor" href="#隔离性" aria-hidden="true">#</a> 隔离性</h2><p>数据库的事务应该具有隔离性，即不同事务在不同的空间能够并发执行，而不会相互干扰。</p><h2 id="持久性" tabindex="-1"><a class="header-anchor" href="#持久性" aria-hidden="true">#</a> 持久性</h2><p>一个事务执行完毕后，对数据库的影响应该是永久的，即使数据库发生宕机，也不应该丢失数据。</p>',11),i=[t];function c(n,o){return e(),r("div",null,i)}const _=a(d,[["render",c],["__file","4.html.vue"]]);export{_ as default};
