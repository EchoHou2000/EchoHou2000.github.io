const t=JSON.parse('{"key":"v-e9172ae6","path":"/posts/shi-wu.html","title":"事务的ACID","lang":"zh-CN","frontmatter":{"date":"2023-10-15T00:00:00.000Z","category":["数据库"],"tag":["重要"],"description":"事务的ACID 事务有四大特性。一致性是最终达成的目的，原子性、隔离性、持久性是手段。 原子性 一个事务中的所有操作，要么全部发生，要么全部不发生，不会出现只执行一半，而另一半没有执行的情况。 比如经典的转账案例，A向B转账100元，操作1是A的账户扣除100元，操作2应该是B的账户增加100元。但是如果操作1结束后的瞬间，数据库宕机，操作2没有发生，整个事务应该回滚，回到操作1之前的状态，就像任何操作没有进行的样子，而不能\\"明明A账户扣除了100元，但是B账户没有增加\\"的情况。 一致性 一个事务执行前后，数据库应该保持一致性的状态，比如A账户和B账户原来余额都是200元，一共是400元，转账之后，A账户应该是100元，B账户应该是300元，加起来还是400元。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blogs/posts/shi-wu.html"}],["meta",{"property":"og:site_name","content":"Echo的学习之路"}],["meta",{"property":"og:title","content":"事务的ACID"}],["meta",{"property":"og:description","content":"事务的ACID 事务有四大特性。一致性是最终达成的目的，原子性、隔离性、持久性是手段。 原子性 一个事务中的所有操作，要么全部发生，要么全部不发生，不会出现只执行一半，而另一半没有执行的情况。 比如经典的转账案例，A向B转账100元，操作1是A的账户扣除100元，操作2应该是B的账户增加100元。但是如果操作1结束后的瞬间，数据库宕机，操作2没有发生，整个事务应该回滚，回到操作1之前的状态，就像任何操作没有进行的样子，而不能\\"明明A账户扣除了100元，但是B账户没有增加\\"的情况。 一致性 一个事务执行前后，数据库应该保持一致性的状态，比如A账户和B账户原来余额都是200元，一共是400元，转账之后，A账户应该是100元，B账户应该是300元，加起来还是400元。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-31T13:43:15.000Z"}],["meta",{"property":"article:author","content":"Echo Hou"}],["meta",{"property":"article:tag","content":"重要"}],["meta",{"property":"article:published_time","content":"2023-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-31T13:43:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务的ACID\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-31T13:43:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Echo Hou\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"原子性","slug":"原子性","link":"#原子性","children":[]},{"level":2,"title":"一致性","slug":"一致性","link":"#一致性","children":[]},{"level":2,"title":"隔离性","slug":"隔离性","link":"#隔离性","children":[]},{"level":2,"title":"持久性","slug":"持久性","link":"#持久性","children":[]}],"git":{"createdTime":1698759795000,"updatedTime":1698759795000,"contributors":[{"name":"houbingzhi123","email":"houbingzhi123@gmail.com","commits":1}]},"readingTime":{"minutes":1.23,"words":369},"filePathRelative":"posts/shi-wu.md","localizedDate":"2023年10月15日","excerpt":"<h1> 事务的ACID</h1>\\n<p>事务有四大特性。一致性是最终达成的目的，原子性、隔离性、持久性是手段。</p>\\n<h2> 原子性</h2>\\n<p>一个事务中的所有操作，要么全部发生，要么全部不发生，不会出现只执行一半，而另一半没有执行的情况。</p>\\n<p>比如经典的转账案例，A向B转账100元，操作1是A的账户扣除100元，操作2应该是B的账户增加100元。但是如果操作1结束后的瞬间，数据库宕机，操作2没有发生，整个事务应该回滚，回到操作1之前的状态，就像任何操作没有进行的样子，而不能\\"明明A账户扣除了100元，但是B账户没有增加\\"的情况。</p>\\n<h2> 一致性</h2>\\n<p>一个事务执行前后，数据库应该保持一致性的状态，比如A账户和B账户原来余额都是200元，一共是400元，转账之后，A账户应该是100元，B账户应该是300元，加起来还是400元。</p>","autoDesc":true}');export{t as data};
